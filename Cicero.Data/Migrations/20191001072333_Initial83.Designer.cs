// <auto-generated />
using System;
using Cicero.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cicero.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191001072333_Initial83")]
    partial class Initial83
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cicero.Data.Entities.Actions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType");

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<int>("TemplateId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UrlIdentifier");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsReceiver", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("ActionsId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.ToTable("ActionsReceiver");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsSender", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("ActionsId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.ToTable("ActionsSender");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClaimId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DisplayTo");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("StateId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Cicero.Data.Entities.AdminConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("AdminConfig");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationName");

                    b.Property<short>("Status");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<short>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", AccessFailedCount = 0, Address = "london", ConcurrencyStamp = "978d05ed-67c6-4da6-aa8f-f1cf64a3a972", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), CreatedBy = "", DisplayName = "Kishan Kishan", Email = "kishan@vesuviois.com", EmailConfirmed = true, FirstName = "Kishan", IsSuperAdmin = true, LastName = "Sharma", LockoutEnabled = true, NormalizedEmail = "KISHAN@VESUVIOIS.COM", NormalizedUserName = "KISHAN@VESUVIOIS.COM", PasswordHash = "AQAAAAEAACcQAAAAEO5lquYUWfSRcDWe+O4Vd+0S95cXnuUyUh89qzwVmFKR8/UXTicXZ03+SEBqdjNtwg==", PhoneNumber = "9851189079", PhoneNumberConfirmed = false, SecurityStamp = "TN2MA6753JLC5JGLUXTIJJA42QTYAQXZ", Status = (short)1, TwoFactorEnabled = false, UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), UserId = "authorize", UserName = "kishan@vesuviois.com" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("varchar(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Excerpt")
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("ParentId");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("Status");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Article");

                    b.HasData(
                        new { Id = 1, Content = "This is Terms and Condition Page", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "terms-and-conditions", Status = (short)1, Template = "Default", Title = "Terms and Conditions", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 2, Content = "This is About Us Page", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "about-us", Status = (short)1, Template = "Default", Title = "About Us", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 3, Content = "This is Privacy Policy Page", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "privacy-policy", Status = (short)1, Template = "Default", Title = "Privacy Policy", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 4, Content = "Nam non ante quam. Mauris posuere nisl ac vehicula imperdiet. Vivamus at tellus a velit scelerisque aliquam vel vitae erat.Morbi vitae eleifend arcu, et rhoncus lacus.", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Nam non ante quam. Mauris posuere nisl ac vehicula imperdiet. Vivamus at tellus a velit scelerisque aliquam vel vitae erat. Morbi vitae eleifend arcu, et rhoncus lacus.", ParentId = 0, Slug = "footer-block-about-us", Status = (short)1, Template = "Default", Title = "Footer Block - About Us", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 5, Content = "Get started with these simple steps", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "get-started", Status = (short)1, Template = "Default", Title = "Get started with these simple steps", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 6, Content = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", ParentId = 5, Slug = "fill-out-questionaries", Status = (short)1, Template = "Default", Title = "Fill out Questionaries", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 7, Content = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", ParentId = 5, Slug = "provide-evidence", Status = (short)1, Template = "Default", Title = "Provide Evidence", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 8, Content = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", ParentId = 5, Slug = "send", Status = (short)1, Template = "Default", Title = "Send", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 9, Content = "", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "guidelines", Status = (short)1, Template = "Default", Title = "Guidelines", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 10, Content = "Track you claim process from anywhere", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Track you claim process from anywhere", ParentId = 9, Slug = "track-you-claim-process", Status = (short)1, Template = "Default", Title = "Guidelines - Track you claim", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 11, Content = "Know about our process for better understanding Cicero", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Know about our process for better understanding Cicero", ParentId = 9, Slug = "know-about-our-process", Status = (short)1, Template = "Default", Title = "Guidelines - Know about our process", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 12, Content = "How to provide evidence more genuinely", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "How to provide evidence more genuinely", ParentId = 9, Slug = "how-to-provide-evidence-more-genuinely", Status = (short)1, Template = "Default", Title = "Guidelines - How to provide evidence", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 13, Content = "Know about our process for better understanding Cicero", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Know about our process for better understanding Cicero", ParentId = 9, Slug = "know-about-our-understanding", Status = (short)1, Template = "Default", Title = "Guidelines - Know about our process", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 14, Content = "Some quick example text to build on the card title and make up the bulk of the card's content.", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Some quick example text to build on the card title and make up the bulk of the card's content.", ParentId = 9, Slug = "some-quick-example-text", Status = (short)1, Template = "Default", Title = "Guidelines - Some quick example text", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 15, Content = "How to provide evidence more genuinely", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "How to provide evidence more genuinely", ParentId = 9, Slug = "how-to-provide-evidence", Status = (short)1, Template = "Default", Title = "Guidelines - How to provide evidence more genuinely", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 16, Content = "Did you find problems with your goods after shipment, don't worry we are here for you.", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Did you find problems with your goods after shipment, don't worry we are here for you.", ParentId = 0, Slug = "having-problems", Status = (short)1, Template = "Default", Title = "Having problems?", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 17, Content = "<h3 class=\"display-4 main-promo-caption heading mt-4\">Relax during your shipment</h3><p class=\"h5 mt-3 main-promo-caption subheading mx-auto mb-5\">We are here to claim for you if your goods are damaged, stolen or anyting happens to your goods</p><p class=\"mx-auto\"><a class=\"btn btn-primary btn-lg btn-rounded px-5 mr-3 mb-3 shadow-sm\" href=\"/user/claim/0/edit.html\" role=\"button\">Claim here</a><a class=\"btn btn-outline-default btn-lg btn-rounded px-5 mb-3 shadow-sm\" href=\"#\" role=\"button\">Learn more</a></p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "", ParentId = 0, Slug = "home-banner", Status = (short)1, Template = "Default", Title = "Home Banner", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 18, Content = "<strong>Cicero</strong><br>GW56 + 5W City of London, London, UK <br>London SE1 9DD, UK<br><strong title = \"Phone\"> P:</strong> (123) 456 - 7890 <br><strong title=\"Email\"> E:</strong> <a href=\"#\"> info@Cicero.com </a>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "", ParentId = 0, Slug = "contact-us", Status = (short)1, Template = "Contact", Title = "Contact Us", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 19, Content = "<p>Hi, [user_name]!</p><h3> Please reset your password </h3><p> Click here to reset you password[reset_link]</p><p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "forgot-password-email", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 20, Content = "<p>Hi, [user_name]!</p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "claim-email-notification", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 21, Content = "<p>Hi, [user_name]!</p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "claim-filed-against-email", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 22, Content = "<p>Hi, [user_name]!</p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "subrogation_letter", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.ArticleMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("MediaId");

                    b.ToTable("ArticleMedia");

                    b.HasData(
                        new { Id = 1, ArticleId = 10, MediaId = 1 },
                        new { Id = 2, ArticleId = 11, MediaId = 2 },
                        new { Id = 3, ArticleId = 12, MediaId = 3 },
                        new { Id = 4, ArticleId = 13, MediaId = 4 },
                        new { Id = 5, ArticleId = 17, MediaId = 5 },
                        new { Id = 6, ArticleId = 18, MediaId = 6 }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<string>("CaseGeneratedId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("StateId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("Default");

                    b.Property<string>("Fields");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModelName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModelTitle")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UrlIdentifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CaseForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("MediaId");

                    b.ToTable("CaseMedia");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComponentType")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldDisplay")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldGridSize")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldKey")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldOptions")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("FieldVisiblity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CoreCaseTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseFormId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Fields");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("TenantId");

                    b.ToTable("CoreCaseTable");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CountryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CountryList");

                    b.HasData(
                        new { Id = 1, Code = "AF", Name = "Afghanistan" },
                        new { Id = 2, Code = "AL", Name = "Albania" },
                        new { Id = 3, Code = "DZ", Name = "Algeria" },
                        new { Id = 4, Code = "DS", Name = "American Samoa" },
                        new { Id = 5, Code = "AD", Name = "Andorra" },
                        new { Id = 6, Code = "AO", Name = "Angola" },
                        new { Id = 7, Code = "AI", Name = "Anguilla" },
                        new { Id = 8, Code = "AQ", Name = "Antarctica" },
                        new { Id = 9, Code = "AG", Name = "Antigua and Barbuda" },
                        new { Id = 10, Code = "AR", Name = "Argentina" },
                        new { Id = 11, Code = "AM", Name = "Armenia" },
                        new { Id = 12, Code = "AW", Name = "Aruba" },
                        new { Id = 13, Code = "AU", Name = "Australia" },
                        new { Id = 14, Code = "AT", Name = "Austria" },
                        new { Id = 15, Code = "AZ", Name = "Azerbaijan" },
                        new { Id = 16, Code = "BS", Name = "Bahamas" },
                        new { Id = 17, Code = "BH", Name = "Bahrain" },
                        new { Id = 18, Code = "BD", Name = "Bangladesh" },
                        new { Id = 19, Code = "BB", Name = "Barbados" },
                        new { Id = 20, Code = "BY", Name = "Belarus" },
                        new { Id = 21, Code = "BE", Name = "Belgium" },
                        new { Id = 22, Code = "BZ", Name = "Belize" },
                        new { Id = 23, Code = "BJ", Name = "Benin" },
                        new { Id = 24, Code = "BM", Name = "Bermuda" },
                        new { Id = 25, Code = "BT", Name = "Bhutan" },
                        new { Id = 26, Code = "BO", Name = "Bolivia" },
                        new { Id = 27, Code = "BA", Name = "Bosnia and Herzegovina" },
                        new { Id = 28, Code = "BW", Name = "Botswana" },
                        new { Id = 29, Code = "BV", Name = "Bouvet Island" },
                        new { Id = 30, Code = "BR", Name = "Brazil" },
                        new { Id = 31, Code = "IO", Name = "British Indian Ocean Territory" },
                        new { Id = 32, Code = "BN", Name = "Brunei Darussalam" },
                        new { Id = 33, Code = "BG", Name = "Bulgaria" },
                        new { Id = 34, Code = "BF", Name = "Burkina Faso" },
                        new { Id = 35, Code = "BI", Name = "Burundi" },
                        new { Id = 36, Code = "KH", Name = "Cambodia" },
                        new { Id = 37, Code = "CM", Name = "Cameroon" },
                        new { Id = 38, Code = "CA", Name = "Canada" },
                        new { Id = 39, Code = "CV", Name = "Cape Verde" },
                        new { Id = 40, Code = "KY", Name = "Cayman Islands" },
                        new { Id = 41, Code = "CF", Name = "Central African Republic" },
                        new { Id = 42, Code = "TD", Name = "Chad" },
                        new { Id = 43, Code = "CL", Name = "Chile" },
                        new { Id = 44, Code = "CN", Name = "China" },
                        new { Id = 45, Code = "CX", Name = "Christmas Island" },
                        new { Id = 46, Code = "CC", Name = "Cocos (Keeling) Islands" },
                        new { Id = 47, Code = "CO", Name = "Colombia" },
                        new { Id = 48, Code = "KM", Name = "Comoros" },
                        new { Id = 49, Code = "CG", Name = "Congo" },
                        new { Id = 50, Code = "CK", Name = "Cook Islands" },
                        new { Id = 51, Code = "CR", Name = "Costa Rica" },
                        new { Id = 52, Code = "HR", Name = "Croatia (Hrvatska)" },
                        new { Id = 53, Code = "CU", Name = "Cuba" },
                        new { Id = 54, Code = "CY", Name = "Cyprus" },
                        new { Id = 55, Code = "CZ", Name = "Czech Republic" },
                        new { Id = 56, Code = "DK", Name = "Denmark" },
                        new { Id = 57, Code = "DJ", Name = "Djibouti" },
                        new { Id = 58, Code = "DM", Name = "Dominica" },
                        new { Id = 59, Code = "DO", Name = "Dominican Republic" },
                        new { Id = 60, Code = "TP", Name = "East Timor" },
                        new { Id = 61, Code = "EC", Name = "Ecuador" },
                        new { Id = 62, Code = "EG", Name = "Egypt" },
                        new { Id = 63, Code = "SV", Name = "El Salvador" },
                        new { Id = 64, Code = "GQ", Name = "Equatorial Guinea" },
                        new { Id = 65, Code = "ER", Name = "Eritrea" },
                        new { Id = 66, Code = "EE", Name = "Estonia" },
                        new { Id = 67, Code = "ET", Name = "Ethiopia" },
                        new { Id = 68, Code = "FK", Name = "Falkland Islands (Malvinas)" },
                        new { Id = 69, Code = "FO", Name = "Faroe Islands" },
                        new { Id = 70, Code = "FJ", Name = "Fiji" },
                        new { Id = 71, Code = "FI", Name = "Finland" },
                        new { Id = 72, Code = "FR", Name = "France" },
                        new { Id = 73, Code = "FX", Name = "France, Metropolitan" },
                        new { Id = 74, Code = "GF", Name = "French Guiana" },
                        new { Id = 75, Code = "PF", Name = "French Polynesia" },
                        new { Id = 76, Code = "TF", Name = "French Southern Territories" },
                        new { Id = 77, Code = "GA", Name = "Gabon" },
                        new { Id = 78, Code = "GM", Name = "Gambia" },
                        new { Id = 79, Code = "GE", Name = "Georgia" },
                        new { Id = 80, Code = "DE", Name = "Germany" },
                        new { Id = 81, Code = "GH", Name = "Ghana" },
                        new { Id = 82, Code = "GI", Name = "Gibraltar" },
                        new { Id = 83, Code = "GK", Name = "Guernsey" },
                        new { Id = 84, Code = "GR", Name = "Greece" },
                        new { Id = 85, Code = "GL", Name = "Greenland" },
                        new { Id = 86, Code = "GD", Name = "Grenada" },
                        new { Id = 87, Code = "GP", Name = "Guadeloupe" },
                        new { Id = 88, Code = "GU", Name = "Guam" },
                        new { Id = 89, Code = "GT", Name = "Guatemala" },
                        new { Id = 90, Code = "GN", Name = "Guinea" },
                        new { Id = 91, Code = "GW", Name = "Guinea-Bissau" },
                        new { Id = 92, Code = "GY", Name = "Guyana" },
                        new { Id = 93, Code = "HT", Name = "Haiti" },
                        new { Id = 94, Code = "HM", Name = "Heard and Mc Donald Islands" },
                        new { Id = 95, Code = "HN", Name = "Honduras" },
                        new { Id = 96, Code = "HK", Name = "Hong Kong" },
                        new { Id = 97, Code = "HU", Name = "Hungary" },
                        new { Id = 98, Code = "IS", Name = "Iceland" },
                        new { Id = 99, Code = "IN", Name = "India" },
                        new { Id = 100, Code = "IM", Name = "Isle of Man" },
                        new { Id = 101, Code = "ID", Name = "Indonesia" },
                        new { Id = 102, Code = "IR", Name = "Iran (Islamic Republic of)" },
                        new { Id = 103, Code = "IQ", Name = "Iraq" },
                        new { Id = 104, Code = "IE", Name = "Ireland" },
                        new { Id = 105, Code = "IL", Name = "Israel" },
                        new { Id = 106, Code = "IT", Name = "Italy" },
                        new { Id = 107, Code = "CI", Name = "Ivory Coast" },
                        new { Id = 108, Code = "JE", Name = "Jersey" },
                        new { Id = 109, Code = "JM", Name = "Jamaica" },
                        new { Id = 110, Code = "JP", Name = "Japan" },
                        new { Id = 111, Code = "JO", Name = "Jordan" },
                        new { Id = 112, Code = "KZ", Name = "Kazakhstan" },
                        new { Id = 113, Code = "KE", Name = "Kenya" },
                        new { Id = 114, Code = "KI", Name = "Kiribati" },
                        new { Id = 115, Code = "KP", Name = "Korea, Democratic Peopl's Republic of" },
                        new { Id = 116, Code = "KR", Name = "Korea, Republic of" },
                        new { Id = 117, Code = "XK", Name = "Kosovo" },
                        new { Id = 118, Code = "KW", Name = "Kuwait" },
                        new { Id = 119, Code = "KG", Name = "Kyrgyzstan" },
                        new { Id = 120, Code = "LA", Name = "Lao People's Democratic Republic" },
                        new { Id = 121, Code = "LV", Name = "Latvia" },
                        new { Id = 122, Code = "LB", Name = "Lebanon" },
                        new { Id = 123, Code = "LS", Name = "Lesotho" },
                        new { Id = 124, Code = "LR", Name = "Liberia" },
                        new { Id = 125, Code = "LY", Name = "Libyan Arab Jamahiriya" },
                        new { Id = 126, Code = "LI", Name = "Liechtenstein" },
                        new { Id = 127, Code = "LT", Name = "Lithuania" },
                        new { Id = 128, Code = "LU", Name = "Luxembourg" },
                        new { Id = 129, Code = "MO", Name = "Macau" },
                        new { Id = 130, Code = "MK", Name = "Macedonia" },
                        new { Id = 131, Code = "MG", Name = "Madagascar" },
                        new { Id = 132, Code = "MW", Name = "Malawi" },
                        new { Id = 133, Code = "MY", Name = "Malaysia" },
                        new { Id = 134, Code = "MV", Name = "Maldives" },
                        new { Id = 135, Code = "ML", Name = "Mali" },
                        new { Id = 136, Code = "MT", Name = "Malta" },
                        new { Id = 137, Code = "MH", Name = "Marshall Islands" },
                        new { Id = 138, Code = "MQ", Name = "Martinique" },
                        new { Id = 139, Code = "MR", Name = "Mauritania" },
                        new { Id = 140, Code = "MU", Name = "Mauritius" },
                        new { Id = 141, Code = "TY", Name = "Mayotte" },
                        new { Id = 142, Code = "MX", Name = "Mexico" },
                        new { Id = 143, Code = "FM", Name = "Micronesia, Federated States of" },
                        new { Id = 144, Code = "MD", Name = "Moldova, Republic of" },
                        new { Id = 145, Code = "MC", Name = "Monaco" },
                        new { Id = 146, Code = "MN", Name = "Mongolia" },
                        new { Id = 147, Code = "ME", Name = "Montenegro" },
                        new { Id = 148, Code = "MS", Name = "Montserrat" },
                        new { Id = 149, Code = "MA", Name = "Morocco" },
                        new { Id = 150, Code = "MZ", Name = "Mozambique" },
                        new { Id = 151, Code = "MM", Name = "Myanmar" },
                        new { Id = 152, Code = "NA", Name = "Namibia" },
                        new { Id = 153, Code = "NR", Name = "Nauru" },
                        new { Id = 154, Code = "NP", Name = "Nepal" },
                        new { Id = 155, Code = "NL", Name = "Netherlands" },
                        new { Id = 156, Code = "AN", Name = "Netherlands Antilles" },
                        new { Id = 157, Code = "NC", Name = "New Caledonia" },
                        new { Id = 158, Code = "NZ", Name = "New Zealand" },
                        new { Id = 159, Code = "NI", Name = "Nicaragua" },
                        new { Id = 160, Code = "NE", Name = "Niger" },
                        new { Id = 161, Code = "NG", Name = "Nigeria" },
                        new { Id = 162, Code = "NU", Name = "Niue" },
                        new { Id = 163, Code = "NF", Name = "Norfolk Island" },
                        new { Id = 164, Code = "MP", Name = "Northern Mariana Islands" },
                        new { Id = 165, Code = "NO", Name = "Norway" },
                        new { Id = 166, Code = "OM", Name = "Oman" },
                        new { Id = 167, Code = "PK", Name = "Pakistan" },
                        new { Id = 168, Code = "PW", Name = "Palau" },
                        new { Id = 169, Code = "PS", Name = "Palestine" },
                        new { Id = 170, Code = "PA", Name = "Panama" },
                        new { Id = 171, Code = "PG", Name = "Papua New Guinea" },
                        new { Id = 172, Code = "PY", Name = "Paraguay" },
                        new { Id = 173, Code = "PE", Name = "Peru" },
                        new { Id = 174, Code = "PH", Name = "Philippines" },
                        new { Id = 175, Code = "PN", Name = "Pitcairn" },
                        new { Id = 176, Code = "PL", Name = "Poland" },
                        new { Id = 177, Code = "PT", Name = "Portugal" },
                        new { Id = 178, Code = "PR", Name = "Puerto Rico" },
                        new { Id = 179, Code = "QA", Name = "Qatar" },
                        new { Id = 180, Code = "RE", Name = "Reunion" },
                        new { Id = 181, Code = "RO", Name = "Romania" },
                        new { Id = 182, Code = "RU", Name = "Russian Federation" },
                        new { Id = 183, Code = "RW", Name = "Rwanda" },
                        new { Id = 184, Code = "KN", Name = "Saint Kitts and Nevis" },
                        new { Id = 185, Code = "LC", Name = "Saint Lucia" },
                        new { Id = 186, Code = "VC", Name = "Saint Vincent and the Grenadines" },
                        new { Id = 187, Code = "WS", Name = "Samoa" },
                        new { Id = 188, Code = "SM", Name = "San Marino" },
                        new { Id = 189, Code = "ST", Name = "Sao Tome and Principe" },
                        new { Id = 190, Code = "SA", Name = "Saudi Arabia" },
                        new { Id = 191, Code = "SN", Name = "Senegal" },
                        new { Id = 192, Code = "RS", Name = "Serbia" },
                        new { Id = 193, Code = "SC", Name = "Seychelles" },
                        new { Id = 194, Code = "SL", Name = "Sierra Leone" },
                        new { Id = 195, Code = "SG", Name = "Singapore" },
                        new { Id = 196, Code = "SK", Name = "Slovakia" },
                        new { Id = 197, Code = "SI", Name = "Slovenia" },
                        new { Id = 198, Code = "SB", Name = "Solomon Islands" },
                        new { Id = 199, Code = "SO", Name = "Somalia" },
                        new { Id = 200, Code = "ZA", Name = "South Africa" },
                        new { Id = 201, Code = "GS", Name = "South Georgia South Sandwich Islands" },
                        new { Id = 202, Code = "SS", Name = "South Sudan" },
                        new { Id = 203, Code = "ES", Name = "Spain" },
                        new { Id = 204, Code = "LK", Name = "Sri Lanka" },
                        new { Id = 205, Code = "SH", Name = "St. Helena" },
                        new { Id = 206, Code = "PM", Name = "St. Pierre and Miquelon" },
                        new { Id = 207, Code = "SD", Name = "Sudan" },
                        new { Id = 208, Code = "SR", Name = "Suriname" },
                        new { Id = 209, Code = "SJ", Name = "Svalbard and Jan Mayen Islands" },
                        new { Id = 210, Code = "SZ", Name = "Swaziland" },
                        new { Id = 211, Code = "SE", Name = "Sweden" },
                        new { Id = 212, Code = "CH", Name = "Switzerland" },
                        new { Id = 213, Code = "SY", Name = "Syrian Arab Republic" },
                        new { Id = 214, Code = "TW", Name = "Taiwan" },
                        new { Id = 215, Code = "TJ", Name = "Tajikistan" },
                        new { Id = 216, Code = "TZ", Name = "Tanzania, United Republic of" },
                        new { Id = 217, Code = "TH", Name = "Thailand" },
                        new { Id = 218, Code = "TG", Name = "Togo" },
                        new { Id = 219, Code = "TK", Name = "Tokelau" },
                        new { Id = 220, Code = "TO", Name = "Tonga" },
                        new { Id = 222, Code = "TT", Name = "Trinidad and Tobago" },
                        new { Id = 223, Code = "TN", Name = "Tunisia" },
                        new { Id = 224, Code = "TR", Name = "Turkey" },
                        new { Id = 225, Code = "TM", Name = "Turkmenistan" },
                        new { Id = 226, Code = "TC", Name = "Turks and Caicos Islands" },
                        new { Id = 227, Code = "TV", Name = "Tuvalu" },
                        new { Id = 228, Code = "UG", Name = "Uganda" },
                        new { Id = 229, Code = "UA", Name = "Ukraine" },
                        new { Id = 230, Code = "AE", Name = "United Arab Emirates" },
                        new { Id = 231, Code = "GB", Name = "United Kingdom" },
                        new { Id = 232, Code = "US", Name = "United States" },
                        new { Id = 233, Code = "UM", Name = "United States minor outlying islands" },
                        new { Id = 234, Code = "UY", Name = "Uruguay" },
                        new { Id = 235, Code = "UZ", Name = "Uzbekistan" },
                        new { Id = 236, Code = "VU", Name = "Vanuatu" },
                        new { Id = 237, Code = "VA", Name = "Vatican City State" },
                        new { Id = 238, Code = "VE", Name = "Venezuela" },
                        new { Id = 239, Code = "VN", Name = "Vietnam" },
                        new { Id = 240, Code = "VG", Name = "Virgin Islands (British)" },
                        new { Id = 241, Code = "VI", Name = "Virgin Islands (U.S.)" },
                        new { Id = 242, Code = "WF", Name = "Wallis and Futuna Islands" },
                        new { Id = 243, Code = "EH", Name = "Western Sahara" },
                        new { Id = 244, Code = "YE", Name = "Yemen" },
                        new { Id = 245, Code = "ZR", Name = "Zaire" },
                        new { Id = 246, Code = "ZM", Name = "Zambia" },
                        new { Id = 247, Code = "ZW", Name = "Zimbabwe" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Type");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("TenantId");

                    b.ToTable("Media");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Test Image 1", Title = "Test Image 1", Url = "default-mobile.jpg" },
                        new { Id = 2, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Test Image 2", Title = "Test Image 2", Url = "default-lawyer.jpg" },
                        new { Id = 3, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Test Image 3", Title = "Test Image 3", Url = "default-smile.jpg" },
                        new { Id = 4, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Test Image 4", Title = "Test Image 4", Url = "default-group.jpg" },
                        new { Id = 5, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Test Image 5", Title = "Test Image 5", Url = "default-banner-image.jpg" },
                        new { Id = 6, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Test Image 5", Title = "Test Image 5", Url = "default-contact-image.jpg" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ClaimId");

                    b.Property<bool>("ClientNotified");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("From");

                    b.Property<bool>("IsNotice");

                    b.Property<bool>("IsRead");

                    b.Property<int>("ParentId");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("From");

                    b.HasIndex("TenantId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Cicero.Data.Entities.MessageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageUser");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new { Id = 1, Name = "View Claim" },
                        new { Id = 2, Name = "Create Claim" },
                        new { Id = 3, Name = "Update Claim" },
                        new { Id = 4, Name = "Delete Claim" },
                        new { Id = 5, Name = "View User" },
                        new { Id = 6, Name = "Create User" },
                        new { Id = 7, Name = "Update User" },
                        new { Id = 8, Name = "Delete User" },
                        new { Id = 9, Name = "Edit Own Profile" },
                        new { Id = 10, Name = "View Article" },
                        new { Id = 11, Name = "Create Article" },
                        new { Id = 12, Name = "Update Article" },
                        new { Id = 13, Name = "Delete Article" },
                        new { Id = 14, Name = "View Media" },
                        new { Id = 15, Name = "Create Media" },
                        new { Id = 16, Name = "Update Media" },
                        new { Id = 17, Name = "Delete Media" },
                        new { Id = 18, Name = "View Menu" },
                        new { Id = 19, Name = "Create Menu" },
                        new { Id = 20, Name = "Update Menu" },
                        new { Id = 21, Name = "Delete Menu" },
                        new { Id = 22, Name = "View Role" },
                        new { Id = 23, Name = "Create Role" },
                        new { Id = 24, Name = "Update Role" },
                        new { Id = 25, Name = "Delete Role" },
                        new { Id = 26, Name = "View Setting" },
                        new { Id = 27, Name = "Create Setting" },
                        new { Id = 28, Name = "Update Setting" },
                        new { Id = 29, Name = "Delete Setting" },
                        new { Id = 30, Name = "View Message" },
                        new { Id = 31, Name = "Compose Message" },
                        new { Id = 32, Name = "Reply Message" },
                        new { Id = 33, Name = "Reply All Message" },
                        new { Id = 34, Name = "View Queue" },
                        new { Id = 35, Name = "Create Queue" },
                        new { Id = 36, Name = "Update Queue" },
                        new { Id = 37, Name = "Delete Queue" },
                        new { Id = 38, Name = "Create Form" },
                        new { Id = 39, Name = "Update Form" },
                        new { Id = 40, Name = "Delete Form" },
                        new { Id = 41, Name = "View Form" },
                        new { Id = 42, Name = "View Tenants" },
                        new { Id = 43, Name = "Admin Layout" },
                        new { Id = 44, Name = "Worker Layout" },
                        new { Id = 45, Name = "View" },
                        new { Id = 46, Name = "Create" },
                        new { Id = 47, Name = "Update" },
                        new { Id = 48, Name = "Delete" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PermissionIds");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup");

                    b.HasData(
                        new { Id = 1, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Claim", PermissionIds = "1,2,3,4", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "User", PermissionIds = "5,6,7,8,9", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Article", PermissionIds = "10,11,12,13", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Media", PermissionIds = "14,15,16,17", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 5, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Menu", PermissionIds = "18,19,20,21", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 6, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Role", PermissionIds = "22,23,24,25", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 7, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Setting", PermissionIds = "26,27,28,29", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 8, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Message", PermissionIds = "30,31,32,33", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 9, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Queue", PermissionIds = "34,35,36,37", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 10, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Form", PermissionIds = "38,39,40,41", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 11, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Tenant", PermissionIds = "42", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 12, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Dashboard Layout", PermissionIds = "43,44", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.PolicyManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Fields");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("TenantId");

                    b.ToTable("PolicyManagement");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UrlIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueForForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllUser");

                    b.Property<int>("CaseFormId");

                    b.Property<int>("Order");

                    b.Property<int>("QueueId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("QueueId");

                    b.ToTable("QueueForForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueuePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<int>("QueueForFormId");

                    b.Property<string>("RoleForQueueId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("QueueForFormId");

                    b.HasIndex("RoleForQueueId");

                    b.ToTable("QueuePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueToState", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("CaseFormId");

                    b.Property<bool>("IsQueue");

                    b.Property<string>("LinePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LinePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PosY")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("QueueId");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("StateId");

                    b.ToTable("QueueToState");
                });

            modelBuilder.Entity("Cicero.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionGroupId");

                    b.Property<int>("PermissionId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FieldDisplay")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldGridSize")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldKey")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldOptions")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FieldType")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("FieldVisiblity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Setting");

                    b.HasData(
                        new { Id = 1, FieldDisplay = "Name", FieldGridSize = "6", FieldKey = "app_name", FieldType = "TEXTBOX", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 2, FieldDisplay = "Front Title", FieldGridSize = "6", FieldKey = "app_name_frontend", FieldType = "TEXTBOX", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 3, FieldDisplay = "Phone", FieldGridSize = "6", FieldKey = "app_phone", FieldType = "TEXTBOX", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 4, FieldDisplay = "Email", FieldGridSize = "6", FieldKey = "app_email", FieldType = "TEXTBOX", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 5, FieldDisplay = "Address", FieldGridSize = "12", FieldKey = "app_address", FieldType = "TEXTAREA", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 6, FieldDisplay = "Starting Claim for Claimant", FieldGridSize = "6", FieldKey = "app_claim_front", FieldType = "TENANTCLAIM", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 7, FieldDisplay = "Starting Claim for Back office", FieldGridSize = "6", FieldKey = "app_claim_back", FieldType = "TENANTCLAIM", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 8, FieldDisplay = "Role for register User in front office", FieldGridSize = "6", FieldKey = "app_user_role", FieldType = "USERROLE", FieldValue = "", FieldVisiblity = 1 },
                        new { Id = 9, FieldDisplay = "Url", FieldGridSize = "6", FieldKey = "app_url", FieldType = "TEXTBOX", FieldValue = "http://52.228.24.65/", FieldVisiblity = 1 },
                        new { Id = 10, FieldDisplay = "Facebook Url", FieldGridSize = "6", FieldKey = "app_facebook", FieldType = "TEXTBOX", FieldValue = "http://facebook.com", FieldVisiblity = 1 },
                        new { Id = 11, FieldDisplay = "Twitter Url", FieldGridSize = "6", FieldKey = "app_twitter", FieldType = "TEXTBOX", FieldValue = "http://twitter.com", FieldVisiblity = 1 },
                        new { Id = 12, FieldDisplay = "Navigation - Primary", FieldKey = "Primary", FieldType = "TEXTBOX", FieldValue = "[{\"index\":0,\"menu\":\"Home\",\"type\":\"custom\",\"url\":\"/\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"About Us\",\"type\":\"article\",\"url\":\"2\",\"desc\":\"\",\"url_title\":\"About Us\",\"target\":\"off\",\"childrens\":[]}]", FieldVisiblity = 0 },
                        new { Id = 13, FieldDisplay = "Navigation - Bottom", FieldKey = "Bottom", FieldType = "TEXTBOX", FieldValue = "[{\"index\":0,\"menu\":\"About Cicero\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"About Us\",\"type\":\"article\",\"url\":\"2\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"About Us\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Privacy Policy\",\"type\":\"article\",\"url\":\"3\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Privacy Policy\",\"target\":\"off\",\"childrens\":[]},{\"index\":2,\"menu\":\"Claim Process\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":3,\"menu\":\"Blogs\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":4,\"menu\":\"Careers\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]}]},{\"index\":1,\"menu\":\"Legals\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"Terms and Conditions\",\"type\":\"article\",\"url\":\"1\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Terms and Conditions\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Privacy Policy\",\"type\":\"article\",\"url\":\"3\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Privacy Policy\",\"target\":\"off\",\"childrens\":[]}]},{\"index\":2,\"menu\":\"Support\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"Contact Us\",\"type\":\"article\",\"url\":\"18\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Contact Us\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Feedback\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":2,\"menu\":\"Help & Support\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]}]}]", FieldVisiblity = 0 },
                        new { Id = 14, FieldKey = "app_themes", FieldValue = "[{\"index\":0,\"menu\":\"About Cicero\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"About Us\",\"type\":\"article\",\"url\":\"2\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"About Us\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Privacy Policy\",\"type\":\"article\",\"url\":\"3\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Privacy Policy\",\"target\":\"off\",\"childrens\":[]},{\"index\":2,\"menu\":\"Claim Process\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":3,\"menu\":\"Blogs\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":4,\"menu\":\"Careers\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]}]},{\"index\":1,\"menu\":\"Legals\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"Terms and Conditions\",\"type\":\"article\",\"url\":\"1\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Terms and Conditions\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Privacy Policy\",\"type\":\"article\",\"url\":\"3\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Privacy Policy\",\"target\":\"off\",\"childrens\":[]}]},{\"index\":2,\"menu\":\"Support\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"Contact Us\",\"type\":\"article\",\"url\":\"18\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Contact Us\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Feedback\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":2,\"menu\":\"Help & Support\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]}]}]", FieldVisiblity = 0 },
                        new { Id = 15, FieldDisplay = "Theme", FieldGridSize = "6", FieldKey = "app_theme", FieldType = "TENANTTHEME", FieldValue = "Test", FieldVisiblity = 1 },
                        new { Id = 16, FieldDisplay = "Sync Case", FieldGridSize = "12", FieldKey = "app_case_synchronization", FieldType = "CASESYNCHRONIZATION", FieldVisiblity = 1 }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanEdit");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("NeedReason");

                    b.Property<bool>("NotifyUser");

                    b.Property<bool>("Status");

                    b.Property<string>("SystemName")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("UserAccess");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateActions", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ActionsId");

                    b.Property<int>("CaseFormId");

                    b.Property<int>("StatetoStateId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.HasIndex("StatetoStateId");

                    b.ToTable("StateActions");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateForForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllUser");

                    b.Property<int>("CaseFormId");

                    b.Property<bool>("FirstBackState");

                    b.Property<bool>("FirstFrontState");

                    b.Property<string>("Icon");

                    b.Property<int>("Order");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("StateId");

                    b.ToTable("StateForForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StatePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanEdit");

                    b.Property<string>("DisplayName");

                    b.Property<string>("RoleId");

                    b.Property<int>("StateForFormId");

                    b.Property<bool>("ViewMode");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StateForFormId");

                    b.ToTable("StatePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateToState", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Aero");

                    b.Property<int>("CaseFormId");

                    b.Property<int>("FromStateId");

                    b.Property<string>("LinePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LinePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StatePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StatePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ToStateId");

                    b.HasKey("Id");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("StateToState");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressPrimary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AddressSecondary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Cicero.Data.Entities.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUser");
                });

            modelBuilder.Entity("Cicero.Data.Entities.UserMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MediaId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");

                    b.HasData(
                        new { Id = 1, ClaimType = "access", ClaimValue = "sa", UserId = "df0d5fc1-b3c9-448f-afea-a43cd08005a6" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("RoleId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsReceiver", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("ActionsReceiverLst")
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsSender", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("ActionsSenderLst")
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActivityLog", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("ClaimId");

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantActivityLogs")
                        .HasForeignKey("TenantId");

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationRole", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenants")
                        .WithMany("TenantRoles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Article", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantArticles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ArticleMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Article", "Article")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Case", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm")
                        .WithMany("Cases")
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantCases")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantCaseClaims")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("CaseMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Component", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CoreCaseTable", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm", "CaseForm")
                        .WithMany()
                        .HasForeignKey("CaseFormId");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Media", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantMedias")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Message", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("ClaimId");

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("From")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantMessages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.MessageUser", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Message", "MessageForUser")
                        .WithMany("MessageUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "UserForMessage")
                        .WithMany("UserMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.PolicyManagement", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm")
                        .WithMany("PolicyManagement")
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Queue", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantQueues")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueForForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm", "CaseForm")
                        .WithMany()
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Queue", "Queue")
                        .WithMany("QueueForForm")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueuePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.QueueForForm", "QueueForForm")
                        .WithMany("QueuePermissions")
                        .HasForeignKey("QueueForFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "RoleForQueue")
                        .WithMany()
                        .HasForeignKey("RoleForQueueId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueToState", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Queue", "Queue")
                        .WithMany("QueueToState")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany("QueueToState")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Setting", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.State", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantStates")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateActions", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.StateToState", "StateToState")
                        .WithMany()
                        .HasForeignKey("StatetoStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateForForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm", "CaseForm")
                        .WithMany()
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany("StateForForm")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StatePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "RoleForState")
                        .WithMany("RoleState")
                        .HasForeignKey("RoleId");

                    b.HasOne("Cicero.Data.Entities.StateForForm", "StateForForm")
                        .WithMany("StatePermissions")
                        .HasForeignKey("StateForFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateToState", b =>
                {
                    b.HasOne("Cicero.Data.Entities.State", "FromState")
                        .WithMany("FromStates")
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Entities.State", "ToState")
                        .WithMany("ToStates")
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.TenantUser", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "TenantForUser")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "UserForTenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Entities.UserMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("UserMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
