// <auto-generated />
using System;
using Cicero.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cicero.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181114050743_Initial8")]
    partial class Initial8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cicero.Data.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DisplayTo");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Cicero.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<short>("Status");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cicero.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<short>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", AccessFailedCount = 0, Address = "london", ConcurrencyStamp = "978d05ed-67c6-4da6-aa8f-f1cf64a3a972", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), CreatedBy = "", DisplayName = "Kishan Kishan", Email = "kishan@vesuviois.com", EmailConfirmed = true, FirstName = "Kishan", IsSuperAdmin = true, LastName = "Sharma", LockoutEnabled = true, NormalizedEmail = "KISHAN@VESUVIOIS.COM", NormalizedUserName = "KISHAN@VESUVIOIS.COM", PasswordHash = "AQAAAAEAACcQAAAAEO5lquYUWfSRcDWe+O4Vd+0S95cXnuUyUh89qzwVmFKR8/UXTicXZ03+SEBqdjNtwg==", PhoneNumber = "9851189079", PhoneNumberConfirmed = false, SecurityStamp = "TN2MA6753JLC5JGLUXTIJJA42QTYAQXZ", Status = (short)1, TwoFactorEnabled = false, UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), UserId = "authorize", UserName = "kishan@vesuviois.com" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("varchar(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Excerpt")
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("ParentId");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("Status");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Article");

                    b.HasData(
                        new { Id = 1, Content = "This is Terms and Condition Page", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "terms-and-conditions", Status = (short)1, Template = "Default", Title = "Terms and Conditions", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 2, Content = "This is About Us Page", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "about-us", Status = (short)1, Template = "Default", Title = "About Us", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 3, Content = "This is Privacy Policy Page", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "privacy-policy", Status = (short)1, Template = "Default", Title = "Privacy Policy", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 4, Content = "Nam non ante quam. Mauris posuere nisl ac vehicula imperdiet. Vivamus at tellus a velit scelerisque aliquam vel vitae erat.Morbi vitae eleifend arcu, et rhoncus lacus.", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Nam non ante quam. Mauris posuere nisl ac vehicula imperdiet. Vivamus at tellus a velit scelerisque aliquam vel vitae erat. Morbi vitae eleifend arcu, et rhoncus lacus.", ParentId = 0, Slug = "footer-block-about-us", Status = (short)1, Template = "Default", Title = "Footer Block - About Us", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 5, Content = "Get started with these simple steps", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "get-started", Status = (short)1, Template = "Default", Title = "Get started with these simple steps", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 6, Content = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", ParentId = 5, Slug = "fill-out-questionaries", Status = (short)1, Template = "Default", Title = "Fill out Questionaries", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 7, Content = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", ParentId = 5, Slug = "provide-evidence", Status = (short)1, Template = "Default", Title = "Provide Evidence", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 8, Content = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Sed pretium enim quis metus feugiat, ac auctor neque ullamcorper. Mauris quis arcu efficitur", ParentId = 5, Slug = "send", Status = (short)1, Template = "Default", Title = "Send", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 9, Content = "", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Slug = "guidelines", Status = (short)1, Template = "Default", Title = "Guidelines", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 10, Content = "Track you claim process from anywhere", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Track you claim process from anywhere", ParentId = 9, Slug = "track-you-claim-process", Status = (short)1, Template = "Default", Title = "Guidelines - Track you claim", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 11, Content = "Know about our process for better understanding Cicero", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Know about our process for better understanding Cicero", ParentId = 9, Slug = "know-about-our-process", Status = (short)1, Template = "Default", Title = "Guidelines - Know about our process", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 12, Content = "How to provide evidence more genuinely", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "How to provide evidence more genuinely", ParentId = 9, Slug = "how-to-provide-evidence-more-genuinely", Status = (short)1, Template = "Default", Title = "Guidelines - How to provide evidence", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 13, Content = "Know about our process for better understanding Cicero", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Know about our process for better understanding Cicero", ParentId = 9, Slug = "know-about-our-understanding", Status = (short)1, Template = "Default", Title = "Guidelines - Know about our process", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 14, Content = "Some quick example text to build on the card title and make up the bulk of the card's content.", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Some quick example text to build on the card title and make up the bulk of the card's content.", ParentId = 9, Slug = "some-quick-example-text", Status = (short)1, Template = "Default", Title = "Guidelines - Some quick example text", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 15, Content = "How to provide evidence more genuinely", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "How to provide evidence more genuinely", ParentId = 9, Slug = "how-to-provide-evidence", Status = (short)1, Template = "Default", Title = "Guidelines - How to provide evidence more genuinely", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 16, Content = "Did you find problems with your goods after shipment, don't worry we are here for you.", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "Did you find problems with your goods after shipment, don't worry we are here for you.", ParentId = 0, Slug = "having-problems", Status = (short)1, Template = "Default", Title = "Having problems?", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 17, Content = "<h3 class=\"display-4 main-promo-caption heading mt-4\">Relax during your shipment</h3><p class=\"h5 mt-3 main-promo-caption subheading mx-auto mb-5\">We are here to claim for you if your goods are damaged, stolen or anyting happens to your goods</p><p class=\"mx-auto\"><a class=\"btn btn-primary btn-lg btn-rounded px-5 mr-3 mb-3 shadow-sm\" href=\"/user/claim/0/edit.html\" role=\"button\">Claim here</a><a class=\"btn btn-outline-default btn-lg btn-rounded px-5 mb-3 shadow-sm\" href=\"#\" role=\"button\">Learn more</a></p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "", ParentId = 0, Slug = "home-banner", Status = (short)1, Template = "Default", Title = "Home Banner", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 18, Content = "<strong>Cicero</strong><br>GW56 + 5W City of London, London, UK <br>London SE1 9DD, UK<br><strong title = \"Phone\"> P:</strong> (123) 456 - 7890 <br><strong title=\"Email\"> E:</strong> <a href=\"#\"> info@Cicero.com </a>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Excerpt = "", ParentId = 0, Slug = "contact-us", Status = (short)1, Template = "Contact", Title = "Contact Us", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 19, Content = "<p>Hi, (user_name)!</p><h3> Please reset your password </h3><p> Click here to reset you password(reset_link)</p><p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "forgot-password-email", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 20, Content = "<p>Hi, (user_name)!</p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "claim-email-notification", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 21, Content = "<p>Hi, (user_name)!</p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "claim-filed-against-email", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 },
                        new { Id = 22, Content = "<p>Hi, (user_name)!</p><br/> Regards,<br/> Cicero Team </p>", CreatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), ParentId = 0, Status = (short)0, Title = "subrogation_letter", Type = "template", UpdatedAt = new DateTime(2018, 9, 5, 16, 20, 30, 0, DateTimeKind.Unspecified), Version = 1 }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Models.ArticleMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("MediaId");

                    b.ToTable("ArticleMedia");

                    b.HasData(
                        new { Id = 1, ArticleId = 10, MediaId = 1 },
                        new { Id = 2, ArticleId = 11, MediaId = 2 },
                        new { Id = 3, ArticleId = 12, MediaId = 3 },
                        new { Id = 4, ArticleId = 13, MediaId = 4 },
                        new { Id = 5, ArticleId = 17, MediaId = 5 },
                        new { Id = 6, ArticleId = 18, MediaId = 6 }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillOfLadingNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CargoDeliveryDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CaseGeneratedId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClaimTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("DamageTypeId");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Extras");

                    b.Property<string>("From")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GeoLocation")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("NumberOfContainers")
                        .HasMaxLength(3);

                    b.Property<int>("OrganisationId");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("StateId");

                    b.Property<bool>("Status");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("To")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.Property<int>("Version");

                    b.Property<string>("Vessel")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Cicero.Data.Models.CaseChangeReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId");

                    b.Property<string>("ChangedBy");

                    b.Property<DateTime>("ChangedDate");

                    b.Property<string>("Reason")
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseChangeReason");
                });

            modelBuilder.Entity("Cicero.Data.Models.CaseClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimFields");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CaseClaim");
                });

            modelBuilder.Entity("Cicero.Data.Models.CaseMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("MediaId");

                    b.ToTable("CaseMedia");
                });

            modelBuilder.Entity("Cicero.Data.Models.DamageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("DamageCategory");

                    b.HasData(
                        new { Id = 1, Name = "Contamination", ParentId = 0 },
                        new { Id = 2, Name = "Loss", ParentId = 0 },
                        new { Id = 3, Name = "Physical Damage", ParentId = 0 },
                        new { Id = 4, Name = "Reefer Damage", ParentId = 0 },
                        new { Id = 5, Name = "Wetting Damage", ParentId = 0 },
                        new { Id = 6, Name = "Liquid", ParentId = 1 },
                        new { Id = 7, Name = "Solid", ParentId = 1 },
                        new { Id = 8, Name = "Gas", ParentId = 1 },
                        new { Id = 9, Name = "Smelling", ParentId = 1 },
                        new { Id = 10, Name = "Vermin", ParentId = 1 },
                        new { Id = 11, Name = "Other", ParentId = 1 },
                        new { Id = 12, Name = "cargo pilferage", ParentId = 2 },
                        new { Id = 13, Name = "container disappearance", ParentId = 2 },
                        new { Id = 14, Name = "container lost overboard", ParentId = 2 },
                        new { Id = 15, Name = "other", ParentId = 2 },
                        new { Id = 16, Name = "Fire", ParentId = 3 },
                        new { Id = 17, Name = "Impact", ParentId = 3 },
                        new { Id = 18, Name = "Heating damage", ParentId = 3 },
                        new { Id = 19, Name = "Freezing damage", ParentId = 3 },
                        new { Id = 20, Name = "Cargo leakage", ParentId = 3 },
                        new { Id = 21, Name = "Cargo shifting", ParentId = 3 },
                        new { Id = 22, Name = "Other", ParentId = 3 },
                        new { Id = 23, Name = "Delay", ParentId = 4 },
                        new { Id = 24, Name = "Off power", ParentId = 4 },
                        new { Id = 25, Name = "Flooding", ParentId = 4 },
                        new { Id = 26, Name = "Pilferage", ParentId = 4 },
                        new { Id = 27, Name = "Reefer malfunction", ParentId = 4 },
                        new { Id = 28, Name = "Reefer physical damage", ParentId = 4 },
                        new { Id = 29, Name = "Other", ParentId = 4 },
                        new { Id = 30, Name = "Flooding", ParentId = 5 },
                        new { Id = 31, Name = "Water ingress Ripped Tarpaulin", ParentId = 5 },
                        new { Id = 32, Name = "Water ingress Damaged/Holed Container", ParentId = 5 },
                        new { Id = 33, Name = "Water ingress Corroded/wears & tears", ParentId = 5 }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Models.Legal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LegalDetails")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Legal");
                });

            modelBuilder.Entity("Cicero.Data.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Media");

                    b.HasData(
                        new { Id = 1, Description = "Test Image 1", Title = "Test Image 1", Url = "default-mobile.jpg" },
                        new { Id = 2, Description = "Test Image 2", Title = "Test Image 2", Url = "default-lawyer.jpg" },
                        new { Id = 3, Description = "Test Image 3", Title = "Test Image 3", Url = "default-smile.jpg" },
                        new { Id = 4, Description = "Test Image 4", Title = "Test Image 4", Url = "default-group.jpg" },
                        new { Id = 5, Description = "Test Image 5", Title = "Test Image 5", Url = "default-banner-image.jpg" },
                        new { Id = 6, Description = "Test Image 5", Title = "Test Image 5", Url = "default-contact-image.jpg" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("From");

                    b.Property<bool>("IsRead");

                    b.Property<int>("ParentId");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.Property<string>("To");

                    b.HasKey("Id");

                    b.HasIndex("From");

                    b.HasIndex("TenantId");

                    b.HasIndex("To");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Cicero.Data.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new { Id = 1, Name = "View Claim" },
                        new { Id = 2, Name = "Create Claim" },
                        new { Id = 3, Name = "Update Claim" },
                        new { Id = 4, Name = "Delete Claim" },
                        new { Id = 5, Name = "View User" },
                        new { Id = 6, Name = "Create User" },
                        new { Id = 7, Name = "Update User" },
                        new { Id = 8, Name = "Delete User" },
                        new { Id = 9, Name = "Edit Own Profile" },
                        new { Id = 10, Name = "View Article" },
                        new { Id = 11, Name = "Create Article" },
                        new { Id = 12, Name = "Update Article" },
                        new { Id = 13, Name = "Delete Article" },
                        new { Id = 14, Name = "View Media" },
                        new { Id = 15, Name = "Create Media" },
                        new { Id = 16, Name = "Update Media" },
                        new { Id = 17, Name = "Delete Media" },
                        new { Id = 18, Name = "View Menu" },
                        new { Id = 19, Name = "Create Menu" },
                        new { Id = 20, Name = "Update Menu" },
                        new { Id = 21, Name = "Delete Menu" },
                        new { Id = 22, Name = "View Role" },
                        new { Id = 23, Name = "Create Role" },
                        new { Id = 24, Name = "Update Role" },
                        new { Id = 25, Name = "Delete Role" },
                        new { Id = 26, Name = "View Setting" },
                        new { Id = 27, Name = "Create Setting" },
                        new { Id = 28, Name = "Update Setting" },
                        new { Id = 29, Name = "Delete Setting" },
                        new { Id = 30, Name = "View Message" },
                        new { Id = 31, Name = "Compose Message" },
                        new { Id = 32, Name = "Reply Message" },
                        new { Id = 33, Name = "Reply All Message" },
                        new { Id = 34, Name = "View Queue" },
                        new { Id = 35, Name = "Create Queue" },
                        new { Id = 36, Name = "Update Queue" },
                        new { Id = 37, Name = "Delete Queue" },
                        new { Id = 38, Name = "Create Form" },
                        new { Id = 39, Name = "Update Form" },
                        new { Id = 40, Name = "Delete Form" },
                        new { Id = 41, Name = "View Form" },
                        new { Id = 42, Name = "View Tenants" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Models.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Side");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UrlIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("Cicero.Data.Models.QueueToState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QueueId");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("StateId");

                    b.ToTable("QueueToState");
                });

            modelBuilder.Entity("Cicero.Data.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Cicero.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FieldDisplay")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldGridSize")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FieldKey")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldOptions")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FieldType")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("FieldVisiblity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Setting");

                    b.HasData(
                        new { Id = 1, FieldDisplay = "Name", FieldGridSize = "6", FieldKey = "app_name", FieldType = "TEXTBOX", FieldValue = "Cicero", FieldVisiblity = 1 },
                        new { Id = 2, FieldDisplay = "Front Title", FieldGridSize = "6", FieldKey = "app_name_frontend", FieldType = "TEXTBOX", FieldValue = "Cargo Carrier Levitate", FieldVisiblity = 1 },
                        new { Id = 3, FieldDisplay = "Phone", FieldGridSize = "6", FieldKey = "app_phone", FieldType = "TEXTBOX", FieldValue = "9851189071", FieldVisiblity = 1 },
                        new { Id = 4, FieldDisplay = "Email", FieldGridSize = "6", FieldKey = "app_email", FieldType = "TEXTBOX", FieldValue = "info@cep.com", FieldVisiblity = 1 },
                        new { Id = 5, FieldDisplay = "Address", FieldGridSize = "12", FieldKey = "app_address", FieldType = "TEXTAREA", FieldValue = "London", FieldVisiblity = 1 },
                        new { Id = 6, FieldDisplay = "Sea Ports", FieldGridSize = "12", FieldKey = "app_ports", FieldType = "TEXTAREA", FieldValue = "Algeciras,Antwerp,Bremerhaven,Busan,Colombo,Colon,Dalian,Dongguan,Dubai,Felixstowe,Guangzhou,Hamburg,Hong Kong,Jeddah,Kaohsiung,Khor Fakkan,Laem Chabang,Lianyungang,Long Beach,Los Angeles,Manila,Marsaxlokk,Mumbai,Mundra,Nanjing,New York,Ningbo-Zhoushan,Piraeus,Port Klang,Port Said,Qingdao,Rizhao,Rotterdam,Saigon,Salalah,Santos,Savannah,Seattle/Tacoma,Shanghai,Shenzhen,Singapore,Taicang,Tanjung Pelepas,Tanjung Perak,Tanjung Priok,Tianjin,Tokyo,Valencia,Xiamen,Yingkou", FieldVisiblity = 1 },
                        new { Id = 7, FieldDisplay = "Role for register User", FieldGridSize = "6", FieldKey = "app_user_role", FieldType = "USERROLE", FieldValue = "User", FieldVisiblity = 1 },
                        new { Id = 8, FieldDisplay = "Url", FieldGridSize = "6", FieldKey = "app_url", FieldType = "TEXTBOX", FieldValue = "http://52.228.24.65/", FieldVisiblity = 1 },
                        new { Id = 9, FieldDisplay = "Facebook Url", FieldGridSize = "6", FieldKey = "app_facebook", FieldType = "TEXTBOX", FieldValue = "http://facebook.com", FieldVisiblity = 1 },
                        new { Id = 10, FieldDisplay = "Twitter Url", FieldGridSize = "6", FieldKey = "app_twitter", FieldType = "TEXTBOX", FieldValue = "http://twitter.com", FieldVisiblity = 1 },
                        new { Id = 11, FieldDisplay = "Navigation - Primary", FieldKey = "Primary", FieldType = "TEXTBOX", FieldValue = "[{\"index\":0,\"menu\":\"Home\",\"type\":\"custom\",\"url\":\"/\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"About Us\",\"type\":\"article\",\"url\":\"2\",\"desc\":\"\",\"url_title\":\"About Us\",\"target\":\"off\",\"childrens\":[]}]", FieldVisiblity = 0 },
                        new { Id = 12, FieldDisplay = "Navigation - Bottom", FieldKey = "Bottom", FieldType = "TEXTBOX", FieldValue = "[{\"index\":0,\"menu\":\"About Cicero\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"About Us\",\"type\":\"article\",\"url\":\"2\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"About Us\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Privacy Policy\",\"type\":\"article\",\"url\":\"3\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Privacy Policy\",\"target\":\"off\",\"childrens\":[]},{\"index\":2,\"menu\":\"Claim Process\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":3,\"menu\":\"Blogs\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":4,\"menu\":\"Careers\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]}]},{\"index\":1,\"menu\":\"Legals\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"Terms and Conditions\",\"type\":\"article\",\"url\":\"1\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Terms and Conditions\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Privacy Policy\",\"type\":\"article\",\"url\":\"3\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Privacy Policy\",\"target\":\"off\",\"childrens\":[]}]},{\"index\":2,\"menu\":\"Support\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[{\"index\":0,\"menu\":\"Contact Us\",\"type\":\"article\",\"url\":\"18\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"Contact Us\",\"target\":\"off\",\"childrens\":[]},{\"index\":1,\"menu\":\"Feedback\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]},{\"index\":2,\"menu\":\"Help & Support\",\"type\":\"custom\",\"url\":\"#\",\"desc\":\"\",\"css_class\":\"\",\"url_title\":\"\",\"target\":\"off\",\"childrens\":[]}]}]", FieldVisiblity = 0 }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanEdit");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("NameBackend")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameFrontend")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("NeedReason");

                    b.Property<bool>("NotifyUser");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Cicero.Data.Models.StateToState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromStateId");

                    b.Property<int>("ToStateId");

                    b.HasKey("Id");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("StateToState");
                });

            modelBuilder.Entity("Cicero.Data.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressPrimary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AddressSecondary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Cicero.Data.Models.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUser");
                });

            modelBuilder.Entity("Cicero.Data.Models.UserMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MediaId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("RoleId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Cicero.Data.Models.ActivityLog", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantActivityLogs")
                        .HasForeignKey("TenantId");

                    b.HasOne("Cicero.Data.Models.ApplicationUser", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.ApplicationRole", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "Tenants")
                        .WithMany("TenantRoles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Models.Article", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantArticles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.ArticleMedia", b =>
                {
                    b.HasOne("Cicero.Data.Models.Article", "Article")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.Media", "Media")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.Case", b =>
                {
                    b.HasOne("Cicero.Data.Models.CaseClaim", "CaseClaim")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.DamageCategory", "DamageCategory")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantCases")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Models.CaseChangeReason", b =>
                {
                    b.HasOne("Cicero.Data.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Models.CaseMedia", b =>
                {
                    b.HasOne("Cicero.Data.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.Media", "Media")
                        .WithMany("CaseMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.Media", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantMedias")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Models.Message", b =>
                {
                    b.HasOne("Cicero.Data.Models.ApplicationUser", "Sender")
                        .WithMany("Senders")
                        .HasForeignKey("From")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantMessages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.ApplicationUser", "Receiver")
                        .WithMany("Receivers")
                        .HasForeignKey("To")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.Queue", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantQueues")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Models.QueueToState", b =>
                {
                    b.HasOne("Cicero.Data.Models.Queue", "Queue")
                        .WithMany("QueueToState")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Models.State", "State")
                        .WithMany("QueueToState")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.RolePermission", b =>
                {
                    b.HasOne("Cicero.Data.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Models.Setting", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Models.State", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "Tenant")
                        .WithMany("TenantStates")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Models.StateToState", b =>
                {
                    b.HasOne("Cicero.Data.Models.State", "FromState")
                        .WithMany("FromStates")
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Models.State", "ToState")
                        .WithMany("ToStates")
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.TenantUser", b =>
                {
                    b.HasOne("Cicero.Data.Models.Tenant", "TenantForUser")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cicero.Data.Models.ApplicationUser", "UserForTenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cicero.Data.Models.UserMedia", b =>
                {
                    b.HasOne("Cicero.Data.Models.Media", "Media")
                        .WithMany("UserMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.ApplicationUser", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cicero.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Cicero.Data.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cicero.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
