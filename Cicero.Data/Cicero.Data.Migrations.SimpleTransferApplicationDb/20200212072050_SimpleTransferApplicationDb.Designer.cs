// <auto-generated />
using System;
using Cicero.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cicero.Data.Cicero.Data.Migrations.SimpleTransferApplicationDb
{
    [DbContext(typeof(SimpleTransferApplicationDbContext))]
    [Migration("20200212072050_SimpleTransferApplicationDb")]
    partial class SimpleTransferApplicationDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cicero.Data.Entities.Actions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType");

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<int>("TemplateId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UrlIdentifier");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsReceiver", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("ActionsId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.ToTable("ActionsReceiver");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsSender", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("ActionsId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.ToTable("ActionsSender");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClaimId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DisplayTo");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("StateId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationName");

                    b.Property<short>("Status");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<short>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Excerpt")
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("FormId");

                    b.Property<int>("ParentId");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("Status");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ArticleMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("MediaId");

                    b.ToTable("ArticleMedia");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<string>("CaseGeneratedId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("StateId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("Default");

                    b.Property<string>("Fields");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModelName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModelTitle")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UrlIdentifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CaseForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("MediaId");

                    b.ToTable("CaseMedia");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Type");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("TenantId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ClaimId");

                    b.Property<bool>("ClientNotified");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("From");

                    b.Property<bool>("IsNotice");

                    b.Property<bool>("IsRead");

                    b.Property<int>("ParentId");

                    b.Property<bool>("ReceiverDelete");

                    b.Property<bool>("SenderDelete");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("From");

                    b.HasIndex("TenantId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Cicero.Data.Entities.MessageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageUser");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.PolicyManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Fields");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("TenantId");

                    b.ToTable("PolicyManagement");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UrlIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueForForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllUser");

                    b.Property<int>("CaseFormId");

                    b.Property<int>("Order");

                    b.Property<int>("QueueId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("QueueId");

                    b.ToTable("QueueForForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueuePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<int>("QueueForFormId");

                    b.Property<string>("RoleForQueueId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("QueueForFormId");

                    b.HasIndex("RoleForQueueId");

                    b.ToTable("QueuePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueToState", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("CaseFormId");

                    b.Property<bool>("IsQueue");

                    b.Property<string>("LinePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LinePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PosY")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("QueueId");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("StateId");

                    b.ToTable("QueueToState");
                });

            modelBuilder.Entity("Cicero.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionGroupId");

                    b.Property<int>("PermissionId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.ApiUser", b =>
                {
                    b.Property<string>("ApiUserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<string>("SystemId")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ApiUserId");

                    b.ToTable("ApiUser");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.ApiUserToken", b =>
                {
                    b.Property<int>("UserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("TokenCreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("TokenExpiryDatetime")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("TokenModifiedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserTokenId");

                    b.ToTable("ApiUserToken");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.AutoSchedulerSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Hour");

                    b.Property<string>("Interval");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Minutes");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("AutoSchedulerSetting");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.ExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bank");

                    b.Property<DateTime?>("DateTime");

                    b.Property<decimal?>("ExchangeRate");

                    b.Property<string>("FromCountryCode");

                    b.Property<string>("FromCurrencyCode");

                    b.Property<int>("ModeOfPayment");

                    b.Property<string>("Source");

                    b.Property<string>("ToCountryCode");

                    b.Property<string>("ToCurrencyCode");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.ExchangeRatesHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bank");

                    b.Property<DateTime?>("DateTime");

                    b.Property<decimal?>("ExchangeRate");

                    b.Property<string>("FromCountryCode");

                    b.Property<string>("FromCurrencyCode");

                    b.Property<int>("ModeOfPayment");

                    b.Property<string>("Source");

                    b.Property<string>("ToCountryCode");

                    b.Property<string>("ToCurrencyCode");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("HistoryId");

                    b.ToTable("ExchangeRatesHistory");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.RateSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("RatePriority");

                    b.Property<string>("SystemId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("RateSupplier");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2020, 2, 12, 13, 5, 50, 402, DateTimeKind.Local), IsActive = true, Name = "Tranfast", Password = "P@ssw0rd", RatePriority = 1, SystemId = "1AB804F0-9252-4A7E-885A-276B65540D84", UpdatedAt = new DateTime(2020, 2, 12, 13, 5, 50, 401, DateTimeKind.Local), Username = "transfast" },
                        new { Id = 2, CreatedAt = new DateTime(2020, 2, 12, 13, 5, 50, 402, DateTimeKind.Local), IsActive = true, Name = "NecMoney", Password = "P@ssw0rd", RatePriority = 2, SystemId = "9D6D65E4-EFF1-4752-892D-3F637A56C159", UpdatedAt = new DateTime(2020, 2, 12, 13, 5, 50, 402, DateTimeKind.Local), Username = "necmoney" },
                        new { Id = 3, CreatedAt = new DateTime(2020, 2, 12, 13, 5, 50, 402, DateTimeKind.Local), IsActive = true, Name = "Safkhan", Password = "P@ssw0rd", RatePriority = 3, SystemId = "D93C65D4-7AA9-4A84-B23F-BEBB8D324476", UpdatedAt = new DateTime(2020, 2, 12, 13, 5, 50, 402, DateTimeKind.Local), Username = "safkhan" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanEdit");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("NeedReason");

                    b.Property<bool>("NotifyUser");

                    b.Property<bool>("Status");

                    b.Property<string>("SystemName")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("UserAccess");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateForForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllUser");

                    b.Property<int>("CaseFormId");

                    b.Property<bool>("FirstBackState");

                    b.Property<bool>("FirstFrontState");

                    b.Property<string>("Icon");

                    b.Property<int>("Order");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("StateId");

                    b.ToTable("StateForForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StatePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanEdit");

                    b.Property<string>("DisplayName");

                    b.Property<string>("RoleId");

                    b.Property<int>("StateForFormId");

                    b.Property<bool>("ViewMode");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StateForFormId");

                    b.ToTable("StatePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateToState", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("ActionsId");

                    b.Property<bool>("Aero");

                    b.Property<int>("CaseFormId");

                    b.Property<int>("FromStateId");

                    b.Property<string>("LinePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LinePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StatePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StatePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ToStateId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("StateToState");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressPrimary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AddressSecondary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Cicero.Data.Entities.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUser");
                });

            modelBuilder.Entity("Cicero.Data.Entities.UserMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MediaId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsReceiver", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("ActionsReceiverLst")
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsSender", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("ActionsSenderLst")
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActivityLog", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("ClaimId");

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantActivityLogs")
                        .HasForeignKey("TenantId");

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationRole", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenants")
                        .WithMany("TenantRoles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Article", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantArticles")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ArticleMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Article", "Article")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Case", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm")
                        .WithMany("Cases")
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantCases")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantCaseClaims")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("CaseMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Media", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantMedias")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Message", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("ClaimId");

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("From");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantMessages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.MessageUser", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Message", "MessageForUser")
                        .WithMany("MessageUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "UserForMessage")
                        .WithMany("UserMessages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.PolicyManagement", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm")
                        .WithMany("PolicyManagement")
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Queue", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantQueues")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueForForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm", "CaseForm")
                        .WithMany()
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Queue", "Queue")
                        .WithMany("QueueForForm")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueuePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.QueueForForm", "QueueForForm")
                        .WithMany("QueuePermissions")
                        .HasForeignKey("QueueForFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "RoleForQueue")
                        .WithMany()
                        .HasForeignKey("RoleForQueueId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueToState", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Queue", "Queue")
                        .WithMany("QueueToState")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany("QueueToState")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.State", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantStates")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateForForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm", "CaseForm")
                        .WithMany()
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany("StateForForm")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StatePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "RoleForState")
                        .WithMany("RoleState")
                        .HasForeignKey("RoleId");

                    b.HasOne("Cicero.Data.Entities.StateForForm", "StateForForm")
                        .WithMany("StatePermissions")
                        .HasForeignKey("StateForFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateToState", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("StateToStatelst")
                        .HasForeignKey("ActionsId");

                    b.HasOne("Cicero.Data.Entities.State", "FromState")
                        .WithMany("FromStates")
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.State", "ToState")
                        .WithMany("ToStates")
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.TenantUser", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "TenantForUser")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "UserForTenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.UserMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("UserMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
