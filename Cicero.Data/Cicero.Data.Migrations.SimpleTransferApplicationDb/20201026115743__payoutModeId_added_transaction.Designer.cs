// <auto-generated />
using System;
using Cicero.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cicero.Data.Cicero.Data.Migrations.SimpleTransferApplicationDb
{
    [DbContext(typeof(SimpleTransferApplicationDbContext))]
    [Migration("20201026115743__payoutModeId_added_transaction")]
    partial class _payoutModeId_added_transaction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cicero.Data.Entities.Actions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionType");

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<int>("TemplateId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UrlIdentifier");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsReceiver", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("ActionsId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.ToTable("ActionsReceiver");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsSender", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("ActionsId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.ToTable("ActionsSender");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClaimId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DisplayTo");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("StateId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("OrganizationName");

                    b.Property<short>("Status");

                    b.Property<int>("TenantId");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "17d59ab8-a192-4537-a625-3227c8e57ef7", ConcurrencyStamp = "0ed60e11-8c45-4934-b0c3-86207c874046", CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", DisplayName = " Customer", Name = "Customer SimpleTransfer", NormalizedName = "CUSTOMER SIMPLETRANSFER", OrganizationName = "Simple Transfer", Status = (short)1, TenantId = 14, Type = 1, UpdatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = "ca4de2af-8d15-4c49-bc12-0a22d7cdf43d", ConcurrencyStamp = "0ed60e11-8c45-4934-b0c3-86207c874046", CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", DisplayName = " Administrator", Name = "Administrator SimpleTransfer", NormalizedName = "Administrator SIMPLETRANSFER", OrganizationName = "Simple Transfer", Status = (short)1, TenantId = 14, Type = 1, UpdatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("EmailGroupId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Excerpt")
                        .HasColumnType("varchar(5000)");

                    b.Property<int?>("FormId");

                    b.Property<int>("ParentId");

                    b.Property<string>("RecipientDatabaseTable")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RecipientField")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(500)");

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ArticleMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("MediaId");

                    b.ToTable("ArticleMedia");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("AssignedTo");

                    b.Property<int>("CaseFormId");

                    b.Property<string>("CaseGeneratedId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("StateId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<int?>("Default");

                    b.Property<string>("Fields");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModelName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModelTitle")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UrlIdentifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CaseForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseId");

                    b.Property<int>("MediaId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("MediaId");

                    b.ToTable("CaseMedia");
                });

            modelBuilder.Entity("Cicero.Data.Entities.JazzCash.Payee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Answer");

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyRegistrationNumber");

                    b.Property<string>("CompanyWebsite");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("IdExpiryDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdType");

                    b.Property<string>("IssuingCountry");

                    b.Property<string>("JazzCashAccount");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PayeeType");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SecurityQuestionId");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("TypeOfBusinessEntity");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Payee");
                });

            modelBuilder.Entity("Cicero.Data.Entities.JazzCash.Payer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyRegistrationNumber");

                    b.Property<string>("CompanyWebsite");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("IdExpiryDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdType");

                    b.Property<string>("IssuingCountry");

                    b.Property<string>("JazzCashAccount");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PayerType");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("TypeOfBusinessEntity");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Payer");
                });

            modelBuilder.Entity("Cicero.Data.Entities.JazzCash.PaymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("Email");

                    b.Property<string>("JazzCashAccountNumber");

                    b.Property<string>("PayeeName");

                    b.Property<string>("PayerName");

                    b.Property<string>("PaymentReferenceNumber");

                    b.Property<int>("Reason");

                    b.Property<decimal>("RequestAmount");

                    b.Property<string>("RequestId");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("PaymentRequest");
                });

            modelBuilder.Entity("Cicero.Data.Entities.JazzCash.SecurityQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Question");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestion");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Type");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("TenantId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ClaimId");

                    b.Property<bool>("ClientNotified");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("From");

                    b.Property<bool>("IsNotice");

                    b.Property<bool>("IsRead");

                    b.Property<int>("ParentId");

                    b.Property<bool>("ReceiverDelete");

                    b.Property<bool>("SenderDelete");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("From");

                    b.HasIndex("TenantId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Cicero.Data.Entities.MessageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageUser");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new { Id = 51, Name = "View Country" },
                        new { Id = 52, Name = "Create Country" },
                        new { Id = 53, Name = "Update Country" },
                        new { Id = 54, Name = "Delete Country" },
                        new { Id = 55, Name = "View Country Payout Mode" },
                        new { Id = 56, Name = "Create Country Payout Mode" },
                        new { Id = 57, Name = "Update Country Payout Mode" },
                        new { Id = 58, Name = "Delete Country Payout Mode" },
                        new { Id = 60, Name = "View Bank Mapper" },
                        new { Id = 61, Name = "Create Bank Mapper" },
                        new { Id = 62, Name = "Update Bank Mapper" },
                        new { Id = 63, Name = "Delete Bank Mapper" },
                        new { Id = 64, Name = "View Branch Mapper" },
                        new { Id = 65, Name = "Create Branch Mapper" },
                        new { Id = 66, Name = "Update Branch Mapper" },
                        new { Id = 67, Name = "Delete Branch Mapper" },
                        new { Id = 68, Name = "View City Config" },
                        new { Id = 69, Name = "Create City Config" },
                        new { Id = 70, Name = "Update City Config " },
                        new { Id = 71, Name = "Delete City Config" },
                        new { Id = 72, Name = "View Rate Supplier" },
                        new { Id = 73, Name = "Create Rate Supplier" },
                        new { Id = 74, Name = "Update Rate Supplier" },
                        new { Id = 75, Name = "Delete Rate Supplier" },
                        new { Id = 76, Name = "View ExchangeRates" },
                        new { Id = 77, Name = "Create ExchangeRates" },
                        new { Id = 78, Name = "Update ExchangeRates" },
                        new { Id = 79, Name = "Delete ExchangeRates" },
                        new { Id = 80, Name = "View Correspondent Bank" },
                        new { Id = 81, Name = "Create Correspondent Bank" },
                        new { Id = 82, Name = "Update Correspondent Bank" },
                        new { Id = 83, Name = "Delete Correspondent Bank" },
                        new { Id = 84, Name = "View Relationship Config" },
                        new { Id = 85, Name = "Create Relationship Config" },
                        new { Id = 86, Name = "Update Relationship Config" },
                        new { Id = 87, Name = "Delete Relationship Config" },
                        new { Id = 88, Name = "View Marital Status Config" },
                        new { Id = 89, Name = "Create Marital Status Config" },
                        new { Id = 90, Name = "Update Marital Status Config" },
                        new { Id = 91, Name = "Delete Marital Status Config" },
                        new { Id = 92, Name = "View Gender Config" },
                        new { Id = 93, Name = "Create Gender Config" },
                        new { Id = 94, Name = "Update Gender Config" },
                        new { Id = 95, Name = "Delete Gender Config" },
                        new { Id = 96, Name = "View IdType Config" },
                        new { Id = 97, Name = "Create IdType Config" },
                        new { Id = 98, Name = "Update IdType Config" },
                        new { Id = 99, Name = "Delete IdType Config" },
                        new { Id = 100, Name = "View Payment Purpose Config" },
                        new { Id = 101, Name = "Create Payment Purpose Config" },
                        new { Id = 102, Name = "Update Payment Purpose Config" },
                        new { Id = 103, Name = "Delete Payment Purpose Config" },
                        new { Id = 104, Name = "View Rate Supplier Fee Config" },
                        new { Id = 105, Name = "Create Rate Supplier Fee Config" },
                        new { Id = 106, Name = "Update Rate Supplier Fee Config" },
                        new { Id = 107, Name = "Delete Rate Supplier Fee Config" },
                        new { Id = 108, Name = "View Txn Limit Config" },
                        new { Id = 109, Name = "Create Txn Limit Config" },
                        new { Id = 110, Name = "Update Txn Limit Config" },
                        new { Id = 111, Name = "Delete Txn Limit Config" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PermissionIds");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup");

                    b.HasData(
                        new { Id = 14, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "CountryConfig", PermissionIds = "51,52,53,54", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 15, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "CountryPayoutMode", PermissionIds = "55,56,57,58", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 16, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "BankMapper", PermissionIds = "60,61,62,63", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 17, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "BranchMapper", PermissionIds = "64,65,66,67", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 18, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "CityConfig", PermissionIds = "68,69,70,71", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 19, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "RateSupplier", PermissionIds = "72,73,74,75", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 20, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "ExchangeRates", PermissionIds = "76,77,78,79", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 21, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "CorrespondentBank", PermissionIds = "80,81,82,83", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 22, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "RelationshipConfig", PermissionIds = "84,85,86,87", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 23, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "MaritalStatusConfig", PermissionIds = "88,89,90,91", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 24, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "GenderConfig", PermissionIds = "92,93,94,95", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 25, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "IdTypeConfig", PermissionIds = "96,97,98,99", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 26, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "PaymentPurposeConfig", PermissionIds = "100,101,102,103", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 27, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "RateSupplierFeeConfig", PermissionIds = "104,105,106,107", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 28, CaseFormId = 0, CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "TxnLimitConfig", PermissionIds = "108,109,110,111", TenantId = 0, UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.PolicyManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Fields");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("TenantId");

                    b.ToTable("PolicyManagement");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseFormId");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UrlIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueForForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllUser");

                    b.Property<int>("CaseFormId");

                    b.Property<int>("Order");

                    b.Property<int>("QueueId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("QueueId");

                    b.ToTable("QueueForForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueuePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<int>("QueueForFormId");

                    b.Property<string>("RoleForQueueId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("QueueForFormId");

                    b.HasIndex("RoleForQueueId");

                    b.ToTable("QueuePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueToState", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("CaseFormId");

                    b.Property<bool>("IsQueue");

                    b.Property<string>("LinePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LinePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PosY")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("QueueId");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("StateId");

                    b.ToTable("QueueToState");
                });

            modelBuilder.Entity("Cicero.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionGroupId");

                    b.Property<int>("PermissionId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.ApiUserToken", b =>
                {
                    b.Property<int>("UserTokenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime>("TokenCreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("TokenExpiryDatetime")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("TokenModifiedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserTokenId");

                    b.ToTable("ApiUserToken");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.AutoSchedulerSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Hour");

                    b.Property<string>("Interval");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Minutes");

                    b.Property<int>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("AutoSchedulerSetting");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RelationshipToBeneId");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Status");

                    b.Property<string>("Suburb")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.BeneficiaryRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("RelationshipName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("BeneficiaryRelationship");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.CountryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CountryPhoneCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<string>("CurrencyName");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("FlagCode");

                    b.Property<string>("FlagImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CountryList");

                    b.HasData(
                        new { Id = 1, Code = "AF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Afghanistan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, Code = "AL", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Albania", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, Code = "DZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Algeria", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, Code = "AS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "American Samoa", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 5, Code = "AD", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Andorra", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 6, Code = "AO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Angola", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 7, Code = "AI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Anguilla", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 8, Code = "AQ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Antarctica", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 9, Code = "AG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Antigua and Barbuda", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 10, Code = "AR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Argentina", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 11, Code = "AM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Armenia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 12, Code = "AW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Aruba", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 13, Code = "AU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Australia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 14, Code = "AT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Austria", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 15, Code = "AZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Azerbaijan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 16, Code = "BS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bahamas", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 17, Code = "BH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bahrain", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 18, Code = "BD", CountryPhoneCode = "+880", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "BDT", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bangladesh", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 19, Code = "BB", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Barbados", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 20, Code = "BY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Belarus", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 21, Code = "BE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Belgium", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 22, Code = "BZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Belize", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 23, Code = "BJ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Benin", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 24, Code = "BM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bermuda", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 25, Code = "BT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bhutan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 26, Code = "BO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bolivia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 27, Code = "BA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bosnia and Herzegovina", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 28, Code = "BW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Botswana", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 29, Code = "BV", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bouvet Island", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 30, Code = "BR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Brazil", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 31, Code = "IO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "British Indian Ocean Territory", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 32, Code = "BN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Brunei Darussalam", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 33, Code = "BG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Bulgaria", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 34, Code = "BF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Burkina Faso", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 35, Code = "BI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Burundi", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 36, Code = "KH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cambodia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 37, Code = "CM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cameroon", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 38, Code = "CA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Canada", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 39, Code = "CV", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cape Verde", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 40, Code = "KY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cayman Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 41, Code = "CF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Central African Republic", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 42, Code = "TD", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Chad", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 43, Code = "CL", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Chile", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 44, Code = "CN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "China", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 45, Code = "CX", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Christmas Island", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 46, Code = "CC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cocos (Keeling) Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 47, Code = "CO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Colombia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 48, Code = "KM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Comoros", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 49, Code = "CG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Congo", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 50, Code = "CK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cook Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 51, Code = "CR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Costa Rica", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 52, Code = "HR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Croatia (Hrvatska)", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 53, Code = "CU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cuba", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 54, Code = "CY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Cyprus", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 55, Code = "CZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Czech Republic", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 56, Code = "DK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Denmark", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 57, Code = "DJ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Djibouti", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 58, Code = "DM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Dominica", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 59, Code = "DO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Dominican Republic", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 60, Code = "TP", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "East Timor", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 61, Code = "EC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Ecuador", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 62, Code = "EG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Egypt", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 63, Code = "SV", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "El Salvador", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 64, Code = "GQ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Equatorial Guinea", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 65, Code = "ER", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Eritrea", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 66, Code = "EE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Estonia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 67, Code = "ET", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Ethiopia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 68, Code = "FK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Falkland Islands (Malvinas)", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 69, Code = "FO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Faroe Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 70, Code = "FJ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Fiji", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 71, Code = "FI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Finland", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 72, Code = "FR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "France", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 73, Code = "FX", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "France, Metropolitan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 74, Code = "GF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "French Guiana", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 75, Code = "PF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "French Polynesia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 76, Code = "TF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "French Southern Territories", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 77, Code = "GA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Gabon", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 78, Code = "GM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Gambia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 79, Code = "GE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Georgia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 80, Code = "DE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Germany", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 81, Code = "GH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Ghana", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 82, Code = "GI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Gibraltar", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 83, Code = "GK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Guernsey", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 84, Code = "GR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Greece", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 85, Code = "GL", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Greenland", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 86, Code = "GD", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Grenada", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 87, Code = "GP", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Guadeloupe", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 88, Code = "GU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Guam", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 89, Code = "GT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Guatemala", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 90, Code = "GN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Guinea", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 91, Code = "GW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Guinea-Bissau", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 92, Code = "GY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Guyana", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 93, Code = "HT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Haiti", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 94, Code = "HM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Heard and Mc Donald Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 95, Code = "HN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Honduras", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 96, Code = "HK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Hong Kong", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 97, Code = "HU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Hungary", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 98, Code = "IS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Iceland", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 99, Code = "IN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "India", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 100, Code = "IM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Isle of Man", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 101, Code = "ID", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Indonesia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 102, Code = "IR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Iran (Islamic Republic of)", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 103, Code = "IQ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Iraq", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 104, Code = "IE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Ireland", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 105, Code = "IL", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Israel", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 106, Code = "IT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Italy", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 107, Code = "CI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Ivory Coast", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 108, Code = "JE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Jersey", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 109, Code = "JM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Jamaica", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 110, Code = "JP", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Japan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 111, Code = "JO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Jordan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 112, Code = "KZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Kazakhstan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 113, Code = "KE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Kenya", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 114, Code = "KI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Kiribati", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 115, Code = "KP", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Korea, Democratic Peopl's Republic of", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 116, Code = "KR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Korea, Republic of", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 117, Code = "XK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Kosovo", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 118, Code = "KW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Kuwait", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 119, Code = "KG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Kyrgyzstan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 120, Code = "LA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Lao People's Democratic Republic", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 121, Code = "LV", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Latvia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 122, Code = "LB", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Lebanon", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 123, Code = "LS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Lesotho", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 124, Code = "LR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Liberia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 125, Code = "LY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Libyan Arab Jamahiriya", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 126, Code = "LI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Liechtenstein", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 127, Code = "LT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Lithuania", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 128, Code = "LU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Luxembourg", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 129, Code = "MO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Macau", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 130, Code = "MK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Macedonia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 131, Code = "MG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Madagascar", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 132, Code = "MW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Malawi", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 133, Code = "MY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Malaysia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 134, Code = "MV", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Maldives", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 135, Code = "ML", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Mali", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 136, Code = "MT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Malta", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 137, Code = "MH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Marshall Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 138, Code = "MQ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Martinique", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 139, Code = "MR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Mauritania", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 140, Code = "MU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Mauritius", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 141, Code = "TY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Mayotte", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 142, Code = "MX", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Mexico", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 143, Code = "FM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Micronesia, Federated States of", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 144, Code = "MD", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Moldova, Republic of", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 145, Code = "MC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Monaco", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 146, Code = "MN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Mongolia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 147, Code = "ME", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Montenegro", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 148, Code = "MS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Montserrat", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 149, Code = "MA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Morocco", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 150, Code = "MZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Mozambique", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 151, Code = "MM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Myanmar", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 152, Code = "NA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Namibia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 153, Code = "NR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Nauru", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 154, Code = "NP", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Nepal", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 155, Code = "NL", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Netherlands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 156, Code = "AN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Netherlands Antilles", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 157, Code = "NC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "New Caledonia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 158, Code = "NZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "New Zealand", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 159, Code = "NI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Nicaragua", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 160, Code = "NE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Niger", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 161, Code = "NG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Nigeria", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 162, Code = "NU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Niue", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 163, Code = "NF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Norfolk Island", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 164, Code = "MP", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Northern Mariana Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 165, Code = "NO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Norway", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 166, Code = "OM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Oman", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 167, Code = "PK", CountryPhoneCode = "+92", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "PKR", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Pakistan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 168, Code = "PW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Palau", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 169, Code = "PS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Palestine", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 170, Code = "PA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Panama", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 171, Code = "PG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Papua New Guinea", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 172, Code = "PY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Paraguay", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 173, Code = "PE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Peru", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 174, Code = "PH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Philippines", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 175, Code = "PN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Pitcairn", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 176, Code = "PL", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Poland", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 177, Code = "PT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Portugal", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 178, Code = "PR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Puerto Rico", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 179, Code = "QA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Qatar", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 180, Code = "RE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Reunion", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 181, Code = "RO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Romania", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 182, Code = "RU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Russian Federation", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 183, Code = "RW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Rwanda", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 184, Code = "KN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Saint Kitts and Nevis", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 185, Code = "LC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Saint Lucia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 186, Code = "VC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Saint Vincent and the Grenadines", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 187, Code = "WS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Samoa", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 188, Code = "SM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "San Marino", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 189, Code = "ST", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Sao Tome and Principe", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 190, Code = "SA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Saudi Arabia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 191, Code = "SN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Senegal", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 192, Code = "RS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Serbia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 193, Code = "SC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Seychelles", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 194, Code = "SL", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Sierra Leone", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 195, Code = "SG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Singapore", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 196, Code = "SK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Slovakia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 197, Code = "SI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Slovenia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 198, Code = "SB", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Solomon Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 199, Code = "SO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Somalia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 200, Code = "ZA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "South Africa", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 201, Code = "GS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "South Georgia South Sandwich Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 202, Code = "SS", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "South Sudan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 203, Code = "ES", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Spain", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 204, Code = "LK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Sri Lanka", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 205, Code = "SH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "St. Helena", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 206, Code = "PM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "St. Pierre and Miquelon", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 207, Code = "SD", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Sudan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 208, Code = "SR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Suriname", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 209, Code = "SJ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Svalbard and Jan Mayen Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 210, Code = "SZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Swaziland", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 211, Code = "SE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Sweden", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 212, Code = "CH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Switzerland", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 213, Code = "SY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Syrian Arab Republic", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 214, Code = "TW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Taiwan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 215, Code = "TJ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Tajikistan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 216, Code = "TZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Tanzania, United Republic of", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 217, Code = "TH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Thailand", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 218, Code = "TG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Togo", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 219, Code = "TK", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Tokelau", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 220, Code = "TO", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Tonga", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 222, Code = "TT", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Trinidad and Tobago", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 223, Code = "TN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Tunisia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 224, Code = "TR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Turkey", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 225, Code = "TM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Turkmenistan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 226, Code = "TC", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Turks and Caicos Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 227, Code = "TV", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Tuvalu", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 228, Code = "UG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Uganda", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 229, Code = "UA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Ukraine", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 230, Code = "AE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "United Arab Emirates", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 231, Code = "GB", CountryPhoneCode = "+44", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "GBP", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "United Kingdom", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 232, Code = "US", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "United States", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 233, Code = "UM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "United States minor outlying islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 234, Code = "UY", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Uruguay", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 235, Code = "UZ", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Uzbekistan", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 236, Code = "VU", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Vanuatu", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 237, Code = "VA", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Vatican City State", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 238, Code = "VE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Venezuela", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 239, Code = "VN", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Vietnam", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 240, Code = "VG", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Virgin Islands (British)", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 241, Code = "VI", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Virgin Islands (U.S.)", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 242, Code = "WF", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Wallis and Futuna Islands", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 243, Code = "EH", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Western Sahara", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 244, Code = "YE", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Yemen", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 245, Code = "ZR", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Zaire", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 246, Code = "ZM", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Zambia", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 247, Code = "ZW", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), CurrencyCode = "", CurrencyName = "", DisplayOrder = 0, FlagCode = "", FlagImageUrl = "", IsActive = false, Name = "Zimbabwe", UpdatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.CountryPayoutConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CountryPayoutConfig");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("IdExpiryDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdType");

                    b.Property<bool>("IsOnfidoVerify");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OnfidoChecksResult");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<string>("Street")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.CustomerCardDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Csv");

                    b.Property<string>("CustomerId");

                    b.Property<string>("ExpDate");

                    b.Property<string>("Number");

                    b.Property<int>("TenantId");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("CustomerCardDetail");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.ExchangeRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bank");

                    b.Property<string>("BankCode");

                    b.Property<DateTime?>("DateTime");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("FromCountryCode");

                    b.Property<string>("FromCurrencyCode");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ModeOfPayment");

                    b.Property<string>("Source");

                    b.Property<string>("ToCountryCode");

                    b.Property<string>("ToCurrencyCode");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.ExchangeRatesHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bank");

                    b.Property<DateTime?>("DateTime");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("FromCountryCode");

                    b.Property<string>("FromCurrencyCode");

                    b.Property<int>("ModeOfPayment");

                    b.Property<string>("Source");

                    b.Property<string>("ToCountryCode");

                    b.Property<string>("ToCurrencyCode");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("HistoryId");

                    b.ToTable("ExchangeRatesHistory");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new { Id = 1, Code = "M", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Male", Status = true, TenantId = 14, UpdatedBy = "", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, Code = "F", CreatedBy = "df0d5fc1-b3c9-448f-afea-a43cd08005a6", CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "Female", Status = true, TenantId = 14, UpdatedBy = "", UpdatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("IdentificationTypeName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("IdentificationType");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.JazzCashTransaction", b =>
                {
                    b.Property<int>("JazzCashTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankBranchId");

                    b.Property<int>("BankId");

                    b.Property<int>("BeneficiaryId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GST")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFreePayment");

                    b.Property<int>("PaymentMethodId");

                    b.Property<int>("PaymentPurpose");

                    b.Property<int>("PaymentRequestId");

                    b.Property<decimal>("PayoutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PayoutCountryId");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("SendAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SendCountryId");

                    b.Property<int>("SourceOfFund");

                    b.Property<int>("StateId");

                    b.Property<int>("Status");

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierTxnRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupplierTxnStatus");

                    b.Property<string>("TransactionBookingNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TransferFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("UserId");

                    b.HasKey("JazzCashTransactionId");

                    b.ToTable("JazzCashTransaction");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.JazzCashTransactionHistory", b =>
                {
                    b.Property<int>("JazzCashTransactionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Remark");

                    b.Property<string>("RemarkBy");

                    b.Property<int>("Status");

                    b.Property<string>("SupplierTxnRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupplierTxnStatus");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("TransactionRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("JazzCashTransactionHistoryId");

                    b.ToTable("JazzCashTransactionHistory");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("MaritalStatusName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.OnfidoApplicant", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("ApplicantId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("CustomerId");

                    b.Property<bool>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("building_name");

                    b.Property<string>("building_number");

                    b.Property<string>("country");

                    b.Property<DateTime>("created_at");

                    b.Property<DateTime?>("delete_at");

                    b.Property<string>("dob");

                    b.Property<string>("email");

                    b.Property<string>("first_name")
                        .IsRequired();

                    b.Property<string>("flat_number");

                    b.Property<string>("href");

                    b.Property<string>("id_numbers");

                    b.Property<string>("last_name")
                        .IsRequired();

                    b.Property<string>("line1");

                    b.Property<string>("line2");

                    b.Property<string>("line3");

                    b.Property<string>("postcode");

                    b.Property<bool>("sandbox");

                    b.Property<string>("state");

                    b.Property<string>("street");

                    b.Property<string>("sub_street");

                    b.Property<string>("town");

                    b.Property<DateTime?>("updated_at");

                    b.HasKey("id");

                    b.ToTable("OnfidoApplicant");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.OnfidoApplicantDocument", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("DocumentId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Url");

                    b.Property<string>("applicant_id");

                    b.Property<DateTime>("created_at");

                    b.Property<string>("file_name");

                    b.Property<string>("file_type");

                    b.Property<string>("issuing_country");

                    b.Property<string>("side");

                    b.Property<string>("type");

                    b.Property<DateTime?>("updated_at");

                    b.HasKey("id");

                    b.ToTable("OnfidoApplicantDocument");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.OnfidoApplicantLivePhoto", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("PhotoId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Url");

                    b.Property<string>("applicant_id");

                    b.Property<DateTime>("created_at");

                    b.Property<string>("file_name");

                    b.Property<string>("file_type");

                    b.Property<DateTime?>("updated_at");

                    b.HasKey("id");

                    b.ToTable("OnfidoApplicantLivePhoto");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.OnfidoChecks", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("ChecksId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("applicant_id");

                    b.Property<bool>("applicant_provides_data");

                    b.Property<DateTime>("created_at");

                    b.Property<string>("form_uri");

                    b.Property<string>("href");

                    b.Property<bool>("paused");

                    b.Property<string>("redirect_uri");

                    b.Property<string>("report_ids");

                    b.Property<string>("result");

                    b.Property<string>("results_uri");

                    b.Property<bool>("sandbox");

                    b.Property<string>("status");

                    b.Property<string>("tags");

                    b.Property<DateTime?>("updated_at");

                    b.Property<string>("version");

                    b.HasKey("id");

                    b.ToTable("OnfidoCheck");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.PaymentApiPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("SystemId")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PaymentApiPartner");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.PaymentPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("PurposeName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<int>("TransfastId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("PaymentPurpose");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.PayoutModeConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("PayoutModeName")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("PayoutModeConfig");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PayoutModeName = "Bank Transfer", Status = true, TenantId = 0, UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PayoutModeName = "Cash Pickup", Status = true, TenantId = 0, UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PayoutModeName = "Airtime Topup", Status = true, TenantId = 0, UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), PayoutModeName = "Mobile Money", Status = true, TenantId = 0, UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.RateSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("RatePriority");

                    b.Property<string>("SystemId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("RateSupplier");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Name = "Tranfast", Password = "P@ssw0rd", RatePriority = 1, SystemId = "1AB804F0-9252-4A7E-885A-276B65540D84", UpdatedAt = new DateTime(2020, 10, 26, 17, 42, 41, 479, DateTimeKind.Local), Username = "transfast" },
                        new { Id = 2, CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Name = "NecMoney", Password = "P@ssw0rd", RatePriority = 2, SystemId = "9D6D65E4-EFF1-4752-892D-3F637A56C159", UpdatedAt = new DateTime(2020, 10, 26, 17, 42, 41, 480, DateTimeKind.Local), Username = "necmoney" },
                        new { Id = 3, CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Name = "Safkhan", Password = "P@ssw0rd", RatePriority = 3, SystemId = "D93C65D4-7AA9-4A84-B23F-BEBB8D324476", UpdatedAt = new DateTime(2020, 10, 26, 17, 42, 41, 480, DateTimeKind.Local), Username = "safkhan" }
                    );
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.RateSupplierFeeConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("FeeAmount");

                    b.Property<decimal>("FeePercentage");

                    b.Property<decimal>("LowerLimitAmount");

                    b.Property<int>("PayoutModeId");

                    b.Property<string>("Remark");

                    b.Property<bool>("Status");

                    b.Property<int>("SupplierId");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<decimal>("UpperLimitAmount");

                    b.HasKey("Id");

                    b.ToTable("RateSupplierFeeConfig");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SecureTradingPaymentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("accounttypedescription");

                    b.Property<string>("acquirerresponsecode");

                    b.Property<string>("authcode");

                    b.Property<string>("baseamount");

                    b.Property<string>("currencyiso3a");

                    b.Property<string>("dccenabled");

                    b.Property<string>("errorcode");

                    b.Property<string>("errormessage");

                    b.Property<bool>("isRefund");

                    b.Property<string>("issuer");

                    b.Property<string>("issuercountryiso2a");

                    b.Property<string>("livestatus");

                    b.Property<string>("maskedpan");

                    b.Property<string>("merchantcountryiso2a");

                    b.Property<string>("merchantname");

                    b.Property<string>("merchantnumber");

                    b.Property<string>("operatorname");

                    b.Property<string>("orderreference");

                    b.Property<string>("paymenttypedescription");

                    b.Property<string>("requestreference");

                    b.Property<string>("requesttypedescription");

                    b.Property<string>("secrand");

                    b.Property<string>("securityresponseaddress");

                    b.Property<string>("securityresponsepostcode");

                    b.Property<string>("securityresponsesecuritycode");

                    b.Property<string>("settleduedate");

                    b.Property<string>("settlestatus");

                    b.Property<string>("splitfinalnumber");

                    b.Property<string>("tid");

                    b.Property<string>("transactionreference");

                    b.Property<string>("transactionstartedtimestamp");

                    b.Property<string>("version");

                    b.HasKey("Id");

                    b.ToTable("SecureTradingPaymentDetail");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SmsCodeCustomerRegistraion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CustomerSuccess");

                    b.Property<string>("Email");

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("ExpiryMinute");

                    b.Property<string>("MobileNumber");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("RetryCount");

                    b.Property<int>("SmsCode");

                    b.Property<bool>("SmsSuccess");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("SmsCodeCustomerRegistraion");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SmsCodeCustomerRegistraionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("MobileNumber");

                    b.Property<int>("SmsCode");

                    b.Property<bool>("SmsSuccess");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("SmsCodeCustomerRegistraionLog");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email");

                    b.Property<string>("ErrorCode");

                    b.Property<string>("Message");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("ResponseMessage");

                    b.Property<string>("StatusMessage");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("SmsLog");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SourceOfFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("SourceOfFundName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<int>("TransfastId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("SourceOfFund");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.STPaymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<string>("PayeeId");

                    b.Property<string>("PayerEmail");

                    b.Property<string>("PayerId");

                    b.Property<string>("PayerMobileNumber");

                    b.Property<decimal>("RequestAmount");

                    b.Property<string>("RequestId");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("STPaymentRequest");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SupplierBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("Status");

                    b.Property<int>("SupplierId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("SupplierBank");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SupplierBankBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BranchName")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CityCode")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("Status");

                    b.Property<int>("SupplierId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("SupplierBankBranch");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SupplierBankMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("NecMoneyBankCode")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Status");

                    b.Property<string>("TransfastBankCode")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("SupplierBankMap");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.SupplierCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityCode")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("StateId")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("StateName")
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("Status");

                    b.Property<int>("SupplierId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("SupplierCity");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankBranchId");

                    b.Property<int>("BankId");

                    b.Property<int>("BeneficiaryId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GST")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFreePayment");

                    b.Property<int>("PaymentMethodId");

                    b.Property<int>("PaymentPurpose");

                    b.Property<decimal>("PayoutAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PayoutCountryId");

                    b.Property<int>("PayoutModeId");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SecureTradingReferenceNo");

                    b.Property<decimal>("SendAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SendCountryId");

                    b.Property<int>("SourceOfFund");

                    b.Property<int>("StateId");

                    b.Property<int>("Status");

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierTxnRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupplierTxnStatus");

                    b.Property<string>("TransactionBookingNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("TransferFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TrasactionType");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("UserId");

                    b.HasKey("TransactionId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Remark");

                    b.Property<string>("RemarkBy");

                    b.Property<int>("Status");

                    b.Property<string>("SupplierTxnRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupplierTxnStatus");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("TransactionRefNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("TransactionHistoryId");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.TransactionLimitConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<decimal>("LimitAmountPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LimitAmountPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LimitAmountPerTxn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LimitNoPerDay");

                    b.Property<int>("LimitNoPerMonth");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("TransactionLimitConfig");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.TransfastRemittancePurpose", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CountryCode");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("TransfastRemittancePurpose");
                });

            modelBuilder.Entity("Cicero.Data.Entities.SimpleTransfer.TransfastSourceOfFund", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2(3)");

                    b.HasKey("Id");

                    b.ToTable("TransfastSourceOfFund");
                });

            modelBuilder.Entity("Cicero.Data.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanEdit");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("NeedReason");

                    b.Property<bool>("NotifyUser");

                    b.Property<bool>("Status");

                    b.Property<string>("SystemName")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("UserAccess");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateForForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllUser");

                    b.Property<int>("CaseFormId");

                    b.Property<bool>("FirstBackState");

                    b.Property<bool>("FirstFrontState");

                    b.Property<string>("Icon");

                    b.Property<int>("Order");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("CaseFormId");

                    b.HasIndex("StateId");

                    b.ToTable("StateForForm");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StatePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanEdit");

                    b.Property<string>("DisplayName");

                    b.Property<string>("RoleId");

                    b.Property<int>("StateForFormId");

                    b.Property<bool>("ViewMode");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StateForFormId");

                    b.ToTable("StatePermission");
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateToState", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("ActionsId");

                    b.Property<bool>("Aero");

                    b.Property<int>("CaseFormId");

                    b.Property<int>("FromStateId");

                    b.Property<string>("LinePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LinePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StatePosX")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StatePosY")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ToStateId");

                    b.HasKey("Id");

                    b.HasIndex("ActionsId");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("StateToState");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressPrimary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AddressSecondary")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Cicero.Data.Entities.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUser");
                });

            modelBuilder.Entity("Cicero.Data.Entities.UserMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MediaId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsReceiver", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("ActionsReceiverLst")
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActionsSender", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("ActionsSenderLst")
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.ActivityLog", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("ClaimId");

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantActivityLogs")
                        .HasForeignKey("TenantId");

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ApplicationRole", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenants")
                        .WithMany("TenantRoles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Article", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantArticles")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.ArticleMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Article", "Article")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("ArticleMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Case", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm")
                        .WithMany("Cases")
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantCases")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantCaseClaims")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.CaseMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("CaseMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Media", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantMedias")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.Message", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("ClaimId");

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("From");

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantMessages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.MessageUser", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Message", "MessageForUser")
                        .WithMany("MessageUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "UserForMessage")
                        .WithMany("UserMessages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.PolicyManagement", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm")
                        .WithMany("PolicyManagement")
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.Queue", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantQueues")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueForForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm", "CaseForm")
                        .WithMany()
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.Queue", "Queue")
                        .WithMany("QueueForForm")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueuePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.QueueForForm", "QueueForForm")
                        .WithMany("QueuePermissions")
                        .HasForeignKey("QueueForFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "RoleForQueue")
                        .WithMany()
                        .HasForeignKey("RoleForQueueId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.QueueToState", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Queue", "Queue")
                        .WithMany("QueueToState")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany("QueueToState")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.State", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "Tenant")
                        .WithMany("TenantStates")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateForForm", b =>
                {
                    b.HasOne("Cicero.Data.Entities.CaseForm", "CaseForm")
                        .WithMany()
                        .HasForeignKey("CaseFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.State", "State")
                        .WithMany("StateForForm")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StatePermission", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole", "RoleForState")
                        .WithMany("RoleState")
                        .HasForeignKey("RoleId");

                    b.HasOne("Cicero.Data.Entities.StateForForm", "StateForForm")
                        .WithMany("StatePermissions")
                        .HasForeignKey("StateForFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.StateToState", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Actions", "Actions")
                        .WithMany("StateToStatelst")
                        .HasForeignKey("ActionsId");

                    b.HasOne("Cicero.Data.Entities.State", "FromState")
                        .WithMany("FromStates")
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.State", "ToState")
                        .WithMany("ToStates")
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cicero.Data.Entities.TenantUser", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Tenant", "TenantForUser")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "UserForTenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Cicero.Data.Entities.UserMedia", b =>
                {
                    b.HasOne("Cicero.Data.Entities.Media", "Media")
                        .WithMany("UserMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser", "User")
                        .WithMany("UserMedias")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cicero.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
