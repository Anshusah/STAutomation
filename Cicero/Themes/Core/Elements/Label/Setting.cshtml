<!-- Hidden Fields : Start -->
@using Cicero.Service.Models.Core.Elements
@model Cicero.Service.Models.Core.Elements.Label;
@using Cicero.Service.Services
@inject ICommonService commonService
@inject IFormBuilderService FormBuilderService

@{
    Label hd = Model as Label;
    int formId = Convert.ToInt32(hd.Data);
    List<SelectListItem> formElements = FormBuilderService.GetFormFields(formId, true);
}

<div class="modal-header flex-column">
    <h5 class="modal-title">Label Setting</h5>
    <p class="mb-0">This settings helps you to customize Label</p>
</div>
<div class="status"></div>
<div class="modal-body">
    <ul class="fb-card">
        <li class="active">
            <header>Name</header>
            <section>
                <div class="form-row">
                    <div class="form-group col-lg-6">
                        <label for="ElementName_@hd.ElementId">Element Name</label>
                        <input type="text" class="form-control" id="ElementName_@hd.ElementId" @hd.GetName("Name") value="@hd.Name" data-name="elmName" />
                        <small class="form-text text-muted">Input a Unique Name for this Element.</small>
                        <span class="text-danger field-validation-valid" data-valmsg-for="ElementName_@hd.ElementId" data-valmsg-replace="true"></span>

                    </div>
                </div>
            </section>
        </li>
        <li>
            <header>Frontend Setting</header>
            <section>
                <input type="hidden" @hd.GetName("ElementId") value="@hd.ElementId" />
                <div class="form-row">
                    <div class="form-group col-lg-6">
                        <label for="labelFrontendId_@hd.FrontendId">Id</label>
                        <input type="text" id="labelFrontendId_@hd.FrontendId" class="form-control" @hd.GetName("FrontendId") value="@hd.FrontendId" />
                    </div>
                    <div class="form-group col-lg-6">
                        <label for="labelFrontendClass_@hd.FrontendId">Class</label>
                        <input type="text" id="labelFrontendClass_@hd.FrontendId" class="form-control" @hd.GetName("FrontendClass") value="@hd.FrontendClass" />

                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelFrontendLabel_@hd.FrontendId">Text</label>
                        <input type="text" class="form-control" id="labelFrontendLabel_@hd.FrontendId" @hd.GetName("FrontendLabel") value="@hd.FrontendLabel" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="frontendIcon_@hd.FrontendId">Icon</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @hd.GetName("FrontendIcon") id="frontendIcon_@hd.FrontendId" value="@hd.FrontendIcon">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" id="selectIconFrontend" type="button" onclick="showIcons('frontend')">Select Icon</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelFrontendLabelFontSize_@hd.FrontendId">Label Font Size</label>
                        <input type="text" class="form-control" id="labelFrontendLabelFontSize_@hd.FrontendId" @hd.GetName("FrontendLabelFontSize") value="@hd.FrontendLabelFontSize" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelFrontendIconFontSize_@hd.FrontendId">Icon Font Size</label>
                        <input type="text" class="form-control" id="labelFrontendIconFontSize_@hd.FrontendId" @hd.GetName("FrontendIconFontSize") value="@hd.FrontendIconFontSize" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelFrontendLabelStyle_@hd.FrontendId">Label Style</label>
                        <input type="text" @hd.GetName("FrontendLabelStyle") hidden value="@hd.FrontendLabelStyle" />
                        <select id="labelFrontendLabelStyle_@hd.FrontendId" class="custom-select labelFrontendLabelStyle-select2" multiple>
                            @{
                                foreach (var ls in Html.GetEnumSelectList<LabelStyles>())
                                {
                                    var frontendLabelStyle = (hd.FrontendLabelStyle == null) ? string.Empty : hd.FrontendLabelStyle;
                                    var values = frontendLabelStyle.Replace(" ", "").Trim().Split(',');
                                    var value = new List<string>();
                                    if (values.Length > 0)
                                    {
                                        value = new List<string>(values);
                                    }
                                    if (value == null)
                                    {
                                        value = new List<string>();
                                    }
                                    <option selected="@(value.Contains(ls.Value))" value="@ls.Value">@ls.Text</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelFrontendImage_@hd.FrontendId">Image</label>
                        <input type="text" class="form-control" id="labelFrontendImage_@hd.FrontendId" @hd.GetName("FrontendImage") value="@hd.FrontendImage" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelFrontendImageHeight_@hd.FrontendId">Image Height</label>
                        <input type="text" class="form-control" id="labelFrontendImageHeight_@hd.FrontendId" @hd.GetName("FrontendImageHeight") value="@hd.FrontendImageHeight" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelFrontendImageWidth_@hd.FrontendId">Image Width</label>
                        <input type="text" class="form-control" id="labelFrontendImageWidth_@hd.FrontendId" @hd.GetName("FrontendImageWidth") value="@hd.FrontendImageWidth" />
                    </div>

                </div>
                <div class="switch-control">
                    <label for="labelFrontendVisible_@hd.FrontendId" class="switch">
                        <input class="switch__input" id="labelFrontendVisible_@hd.FrontendId" @hd.GetName("FrontendVisible") type="checkbox" value="true" @hd.GetChecked(hd.FrontendVisible)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Default visible</span>
                    </label>
                </div>

                <div class="switch-control">
                    <label for="labelFrontendVisibility_@hd.FrontendId" class="switch">
                        <input class="switch__input" id="labelFrontendVisibility_@hd.FrontendId" @hd.GetName("FrontendLabelVisibility") type="checkbox" value="true" @hd.GetChecked(hd.FrontendLabelVisibility)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Label Visibility</span>
                    </label>
                </div>

                <div class="switch-control">
                    <label for="iconFrontendVisibility_@hd.FrontendId" class="switch">
                        <input class="switch__input switch_frontend_visibility" id="iconFrontendVisibility_@hd.FrontendId" @hd.GetName("FrontendIconVisibility") type="checkbox" value="true" @hd.GetChecked(hd.FrontendIconVisibility)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Icon Visibility</span>
                    </label>
                </div>

                <div class="switch-control">
                    <label for="imageFrontendVisibility_@hd.FrontendId" class="switch">
                        <input class="switch__input switch_frontend_visibility" id="imageFrontendVisibility_@hd.FrontendId" @hd.GetName("FrontendImageVisibility") type="checkbox" value="true" @hd.GetChecked(hd.FrontendImageVisibility)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Image Visibility</span>
                    </label>
                </div>

                <div class="switch-control">
                    <label for="labelVisibleinFooter_@hd.FrontendId" class="switch">
                        <input class="switch__input" id="labelVisibleinFooter_@hd.FrontendId" @hd.GetName("VisibleinFooter") type="checkbox" value="true" @hd.GetChecked(hd.VisibleinFooter)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Visible In Footer</span>
                    </label>
                </div>

            </section>
        </li>
        <li>
            <header>Backend Setting</header>
            <section>
                <div class="form-row">
                    <div class="form-group col-lg-6">
                        <label for="labelBackendId_@hd.BackendId">Id</label>
                        <input type="text" class="form-control" id="labelBackendId_@hd.BackendId" @hd.GetName("BackendId") value="@hd.BackendId" />
                    </div>
                    <div class="form-group col-lg-6">
                        <label for="labelBackendClass_@hd.BackendId">Class</label>
                        <input type="text" class="form-control" id="labelBackendClass_@hd.BackendId" @hd.GetName("BackendClass") value="@hd.BackendClass" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelBackendLabel_@hd.BackendId">Text</label>
                        <input type="text" class="form-control" id="labelBackendLabel_@hd.BackendId" @hd.GetName("BackendLabel") value="@hd.BackendLabel" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="backendIcon_@hd.BackendId">Icon</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @hd.GetName("BackendIcon") id="backendIcon_@hd.BackendId" value="@hd.BackendIcon">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" id="selectIconBackend" type="button" onclick="showIcons('backend')">Select Icon</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelBackendLabelFontSize_@hd.BackendId">Label Font Size</label>
                        <input type="text" class="form-control" id="labelBackendLabelFontSize_@hd.BackendId" @hd.GetName("BackendLabelFontSize") value="@hd.BackendLabelFontSize" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelBackendIconFontSize_@hd.BackendId">Icon Font Size</label>
                        <input type="text" class="form-control" id="labelBackendIconFontSize_@hd.BackendId" @hd.GetName("BackendIconFontSize") value="@hd.BackendIconFontSize" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelBackendLabelStyle_@hd.BackendId">Label Style</label>
                        <input type="text" @hd.GetName("BackendLabelStyle") hidden value="@hd.BackendLabelStyle" />
                        <select id="labelBackendLabelStyle_@hd.BackendId" class="custom-select labelBackendLabelStyle-select2" multiple>
                            @{
                                foreach (var ls in Html.GetEnumSelectList<LabelStyles>())
                                {
                                    var backendLabelStyle = (hd.BackendLabelStyle == null) ? string.Empty : hd.BackendLabelStyle;
                                    var values = backendLabelStyle.Replace(" ", "").Trim().Split(',');
                                    var value = new List<string>();
                                    if (values.Length > 0)
                                    {
                                        value = new List<string>(values);
                                    }

                                    if (value == null)
                                    {
                                        value = new List<string>();
                                    }
                                    <option selected="@(value.Contains(ls.Value))" value="@ls.Value">@ls.Text</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelBackendImage_@hd.BackendId">Image</label>
                        <input type="text" class="form-control" id="labelBackendImage_@hd.BackendId" @hd.GetName("BackendImage") value="@hd.BackendImage" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelBackendImageHeight_@hd.BackendId">Image Height</label>
                        <input type="text" class="form-control" id="labelBackendImageHeight_@hd.BackendId" @hd.GetName("BackendImageHeight") value="@hd.BackendImageHeight" />
                    </div>

                    <div class="form-group col-lg-6">
                        <label for="labelBackendImageWidth_@hd.BackendId">Image Width</label>
                        <input type="text" class="form-control" id="labelBackendImageWidth_@hd.BackendId" @hd.GetName("BackendImageWidth") value="@hd.BackendImageWidth" />
                    </div>
                </div>
                <div class="switch-control">
                    <label for="labelBackendVisible_@hd.BackendId" class="switch">
                        <input class="switch__input" id="labelBackendVisible_@hd.BackendId" @hd.GetName("BackendVisible") type="checkbox" value="true" @hd.GetChecked(hd.BackendVisible)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Default visible</span>
                    </label>
                </div>

                <div class="switch-control">
                    <label for="labelBackendVisibility_@hd.BackendId" class="switch">
                        <input class="switch__input" id="labelBackendVisibility_@hd.BackendId" @hd.GetName("BackendLabelVisibility") type="checkbox" value="true" @hd.GetChecked(hd.BackendLabelVisibility)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Label Visibility</span>
                    </label>
                </div>

                <div class="switch-control">
                    <label for="iconBackendVisibility_@hd.BackendId" class="switch">
                        <input class="switch__input switch_backend_visibility" id="iconBackendVisibility_@hd.BackendId" @hd.GetName("BackendIconVisibility") type="checkbox" value="true" @hd.GetChecked(hd.BackendIconVisibility)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Icon Visibility</span>
                    </label>
                </div>

                <div class="switch-control">
                    <label for="imageBackendVisibility_@hd.BackendId" class="switch">
                        <input class="switch__input switch_backend_visibility" id="imageBackendVisibility_@hd.BackendId" @hd.GetName("BackendImageVisibility") type="checkbox" value="true" @hd.GetChecked(hd.BackendImageVisibility)>
                        <span class="switch__state"></span>
                        <span class="switch__label">Image Visibility</span>
                    </label>
                </div>
            </section>
        </li>
        <li>
            <header>Permission</header>
            <section>
                <div class="table-responsive">
                    <table class="table table-custom">
                        <thead>
                            <tr>
                                <th>Role Name</th>
                                <th>Read</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int index = 0;
                                foreach (var role in commonService.GetRoleList())
                                {
                                    var Roledata = hd?.Permissions?.Where(p => p.RoleId == role.Value).FirstOrDefault();
                                    if (Roledata != null)
                                    {

                                        <tr>
                                            <td>
                                                @role.Text
                                                <input class="form-control" type="hidden" name="Permissions[@index][RoleId]" value="@role.Value" />
                                            </td>

                                            <td>
                                                <div class="custom-control custom-checkbox">
                                                    <input class="custom-control-input" name="Permissions[@index][Read]" type="checkbox" value="true" checked="@Roledata.Read" id="Permissions_@(index + "_Read_" + hd.ElementId)" />
                                                    <label class="custom-control-label" for="Permissions_@(index + "_Read_" + hd.ElementId)"></label>
                                                </div>
                                            </td>
                                        </tr>

                                    }
                                    else
                                    {
                                        <tr>
                                            <td>
                                                @role.Text
                                                <input class="form-control" type="hidden" name="Permissions[@index][RoleId]" value="@role.Value" />
                                            </td>

                                            <td>
                                                <div class="custom-control custom-checkbox">
                                                    <input class="custom-control-input" name="Permissions[@index][Read]" type="checkbox" value="true" checked id="Permissions_@(index + "_Read_" + hd.ElementId)" />
                                                    <label class="custom-control-label" for="Permissions_@(index + "_Read_" + hd.ElementId)"></label>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                    index++;
                                }
                            }
                        </tbody>

                    </table>
                </div>
            </section>
        </li>

        <li>
            <header>Developer Options</header>
            <section>
                <div class="form-row">
                    <div class="form-group col-lg-6">
                        <label for="Template_@hd.ElementId">Template</label>
                        <input type="text" class="form-control" id="Template_@hd.ElementId" @hd.GetName("Template") value="@hd.Template">
                    </div>
                    <div class="form-group col-lg-6">
                        <label for="labelWrapperTemplate_@hd.ElementId">WrapperTemplate</label>
                        <input type="text" class="form-control" id="labelWrapperTemplate_@hd.ElementId" @hd.GetName("WrapperTemplate") value="@hd.WrapperTemplate" />
                    </div>

                </div>

                <div class="form-row">
                    <div class="form-group col-lg-6">
                        <label for="TableName_@hd.ElementId">Table Name</label>
                        <select value="@hd.TableName" id="TableName_@hd.ElementId" class="tableMap custom-select"></select>
                        <input type="text" value="@hd.TableName" @hd.GetName("TableName") hidden>
                        @*<input type="text" class="form-control" id="">*@
                    </div>
                    <div class="form-group col-lg-6">
                        <label for="FieldName_@hd.ElementId">Field Name</label>
                        <select value="@hd.FieldName" id="FieldName_@hd.ElementId" class="fieldMap custom-select"></select>
                        <input type="text" class="form-control" value="@hd.FieldName" @hd.GetName("FieldName") hidden>
                    </div>
                </div>
                <div class="form-group">
                    <div class="form-group col-lg-6">
                        <label for="SetValueFrom_@hd.ElementId">Set Value From</label>
                        <select value="@hd.SetValueFrom" id="SetValueFrom_@hd.ElementId" @hd.GetName("SetValueFrom") class="custom-select">
                            <option value="">Please Select</option>
                            @foreach (var item in formElements.Where(x => x.Value != hd.ElementId.ToString()))
                            {
                                <option selected="@(hd.SetValueFrom == item.Value)" value="@item.Value">@item.Text</option>
                            }
                        </select>
                    </div>
                </div>
            </section>
        </li>
    </ul>
</div>

<script>
    var selectedIcon = "";
    $(document).ready(function () {
        $('.labelFrontendLabelStyle-select2').select2();
        $('.labelBackendLabelStyle-select2').select2();
    });
    $(function () {
        $('.switch_frontend_visibility').on("change", function () {
            $('.switch_frontend_visibility').not(this).each(function () {
                if ($(this).is(":checked")) {
                    $(this).prop("checked", false);
                }
            });
        })

           $('.switch_backend_visibility').on("change", function () {
            $('.switch_backend_visibility').not(this).each(function () {
                if ($(this).is(":checked")) {
                    $(this).prop("checked", false);
                }
            });
        })

        $('.labelFrontendLabelStyle-select2').on("change", function () {
            $('input[name=FrontendLabelStyle]').val($(this).val());
        })

        $('.labelBackendLabelStyle-select2').on("change", function () {
            $('input[name=BackendLabelStyle]').val($(this).val());
        })

        $(".icon-item").on('click', function () {
            $(".icon-item").removeClass('active');
            selectedIcon = $(this).find(".icon-info").find("i").attr("class")
            $(this).addClass('active');
        });
    });

    function showIcons(e) {
        $("#modal-select-icon").modal("show");
        selectedIcon = "";
        $(".icon-item").removeClass('active');
        $("#btn-select-icon").attr("onclick", "setIconOnTab('" + e + "')");
    }



    function setIconOnTab(e) {
        console.log("here");
        if (selectedIcon != "") {
            if (e == "frontend") {
                $("[name='FrontendIcon']").val(selectedIcon);
            }
            else {
                $("[name='BackendIcon']").val(selectedIcon);
            }
        }
        else {

        }

    }
</script>