@using Themes.Core.Components
@using Cicero.Service.Services
@using Cicero.Service.Helpers
@using Cicero.Service.Models.Core
@inject IRoleService roleService
@inject IQueueService queueService
@inject Permission Permission
@inject IFormBuilderService formBuilderService
@inject ICommonService commonService
@inject ISynchronizeService synchronizeService
@inject Utils utils
@{
    CaseAssignment CaseAssignment = Model as CaseAssignment;
    List<SelectListItem> sourceTables = synchronizeService.getSyncSourceTable();
    var loggedUser = commonService.getLoggedInUserId();
    string roleId = commonService.GetRoleIdByUserId(loggedUser);
}


<input name="json" type="text" value="@CaseAssignment.json" style="display:none">
<style>


    .add-clause {
        color: var(--green);
        padding: 2px;
    }

    .remove-clause {
        color: var(--red);
        padding: 2px;
    }
</style>
<div class="sync-wrap">
    <i class="close-sync"></i>
    <div class="row mb-2">

        <div class="form-group col-lg-6">
            <label>Title</label>
            <input type="text" name="Title" class="form-control" value="@CaseAssignment.Title">
        </div>
        <div class="form-group col-lg-6">
            <label>Form</label>
            <select class="form-control custom-select" name="FormId" value="@CaseAssignment.FormId">
                <option value="">Choose Form</option>
                @foreach (var item in formBuilderService.FormList("" + utils.GetTenantFromSession() + ""))
                {
                    if (CaseAssignment.FormId == (item.Value))
                    {
                        <option selected="selected" value="@item.Value">@item.Text</option>
                    }
                    else
                    {
                        <option value="@item.Value">@item.Text</option>
                    }

                }
            </select>
        </div>
        <div class="form-group col-lg-12">
            <div id="rules-@CaseAssignment.ComponentId"></div>
        </div>

    </div>
</div>
<style type="text/css">

    .query-builder .rules-group-container {
        width: 100%;
    }

    .query-builder .rules-group-container {
        padding: 10px;
        padding-bottom: 6px;
        border: 1px solid #d8d8d8;
        background: rgb(242, 242, 242);
    }

    .bootstrap-select .dropdown-menu.inner {
        width: 300px;
    }
</style>

@*<script>

    //Components.Core.LoadScript('script.js', document.body,function(){
        //alert("loaded")
    //});
 $('[data-toggle="tooltip"]').tooltip();
    var $b = $('#rules-@CaseAssignment.ComponentId');
    var options = {
        default_group_flags: {
            condition_readonly: false,
            no_add_group: false
        },
    allow_empty: true,
    //default_filter: 'name',
    sort_filters: true,

    filters:[],
    plugins: {
      'bt-tooltip-errors': { delay: 100 },
      'sortable': null,
      'filter-description': { mode: 'bootbox' },
      'bt-selectpicker': true,
      //'chosen-selectpicker': null,
      'unique-filter': null,
      'bt-checkbox': { color: 'primary' },
      'invert': null,
      'not-group': null
    }
};



    $('#rules-@CaseAssignment.ComponentId').on('afterCreateRuleInput.queryBuilder', function (e, rule) {
        if (rule.filter.plugin == 'selectize') {
            rule.$el.find('.rule-value-container').css('min-width', '200px')
                .find('.selectize-control').removeClass('form-control');
        }
    });

    Components.CaseAssignment = {
        Init: function () {
        Components.Global.Init();
            Components.Core.Hooks.addAction("before_component_save", function (e) {
                return { submit: true };
            })
        }

    };
    Components.Core.Hooks.addAction('before_component_save', function (e, f) {
        if (e.component_type == "Themes.Core.Components.CaseAssignment") {
        let rules = encodeURIComponent(JSON.stringify($("#rules-" + e.component_id).queryBuilder('getRules')));
        $("[data-component-id='" + e.component_id + "']").find('input[name=json]').val(rules);
        if (rules == null) {
            return { submit: false };
            }
         }
        return { submit: true };
    });
    Components.Core.Hooks.addAction('after_component_save', function (e, f) {
        if (e.component_type == "Themes.Core.Components.CaseAssignment") {
            try {
                let res = JSON.parse(decodeURIComponent(e.args.json));
                $("#rules-" + e.args.component_id).queryBuilder('setRules', res);
            } catch (e) { }
            return true;
        }
    });
    //Components.Core.Hooks.addAction("filter_caseassignment_options", function (e, f) {
    //    alert("testing");
    //});
    $(document).ready(function () {
        options.filters = JSON.parse('@Html.Raw(CaseAssignment.GetFormFilters(CaseAssignment.FormId.ToString()))');
        //$b.queryBuilder(options);
        try{
        $("#rules-@CaseAssignment.ComponentId").queryBuilder('setFilters',true,options.filters);
        } catch (e) { }
        try{
        var rulesData = JSON.parse(decodeURIComponent('@CaseAssignment.json'));

        $("#rules-@CaseAssignment.ComponentId").queryBuilder('setRules', rulesData);
        }catch(e){}
        $(document).on("change","[name='FormId']",function(){
            var formId=$(this).val();
            $.ajax({
                dataType: "json",
                method: "POST",
                url: "/ajax.html",
                data: {action:"on_automation_component_form_change",form_id:formId},
                success: function(data){
                    try{
                    $("#rules-@CaseAssignment.ComponentId").queryBuilder('setFilters',true,data);
                    }catch(e){

                    }
                }
            });
        });

    })

</script>*@
