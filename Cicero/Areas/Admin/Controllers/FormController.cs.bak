using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Cicero.Service.Helpers;
using Cicero.Service.Models;
using Cicero.Service.Models.Core;
using Cicero.Service.Services;
using Core.Status;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Cicero.Areas.Admin.Controllers
{

    public class FormController : BaseController
    {
        private readonly IUserService _userService;
        private readonly IFormBuilderService _formBuilderService;
        private readonly Utils _utils;
        private readonly ILogger<FormController> _log;
        private readonly IStatus _status;
        private readonly ITenantService _tenantService;
        private readonly AppSetting _appSetting;
        private readonly ICommonService _ICommonService;
        private readonly IFormService _formService;
        private readonly IQueueService _queueService;
        private readonly ICaseService _caseService;
        private readonly ISynchronizeService _synchronizeService;
        private readonly IAutomationService _automationService;

        public FormController(IFormService IFormService, ISynchronizeService synchronizeService, IAutomationService autoService, ICaseService caseService, IQueueService queueService, ICommonService ics, IUserService userService, AppSetting appSetting, IFormBuilderService formBuilderService, Utils utils, ILogger<FormController> log, IStatus status, ITenantService tenantService) : base(userService)
        {
            _userService = userService;
            _formBuilderService = formBuilderService;
            _utils = utils;
            _log = log;
            _status = status;
            _tenantService = tenantService;
            _appSetting = appSetting;
            _ICommonService = ics;
            _formService = IFormService;
            _queueService = queueService;
            _caseService = caseService;
            _synchronizeService = synchronizeService;
            _automationService = autoService;
        }

        [Area("Admin")]
        [HttpGet]
        [Route("admin/form/{form}.html")]
        [Route("admin/form/{tenant_identifier}/{form}.html")]
        [Route("admin/form/{tenant_identifier}/{form}/{queue}.html")]
        public IActionResult Index(string tenant_identifier, string form, string queue)
        {
            List<CaseFormViewModel> lst = _ICommonService.GetCaseFormListForActiveTenantId();
            string search_key = "Identifier\":\"" + form;
            CaseFormViewModel lsts = lst.Where(d => d.Fields.Contains(search_key)).FirstOrDefault();
            var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };
            var allfields = JsonConvert.DeserializeObject<FormBuilderViewModel>(lsts.Fields, settings);
            List<KeyValuePair<string, string>> dyn = new List<KeyValuePair<string, string>>();
            List<KeyValuePair<string, List<string>>> dyn1 = new List<KeyValuePair<string, List<string>>>();
            List<String> TableList = new List<string>();
            foreach (var tab in allfields.Tab)
            {
                foreach (var row in tab.Row)
                {
                    foreach (var column in row.Column)
                    {
                        foreach (dynamic element in column.Element)
                        {
                            var isit = element.GetType().GetProperty("VisibleinGrid");
                            if (isit != null)
                            {
                                if (element.VisibleinGrid)
                                {
                                    TableList.Add(element.TableName);
                                    dyn.Add(new KeyValuePair<string, string>(element.BackendLabel, element.ElementId));
                                    List<String> listr = new List<string>();
                                    listr.Add(element.BackendLabel);
                                    listr.Add(element.FieldName);
                                    dyn1.Add(new KeyValuePair<string, List<string>>(element.TableName, listr));
                                }
                            }
                        }
                    }
                }
            }

            var jsondata = JsonConvert.SerializeObject(dyn);

            ViewBag.JsonData = jsondata;


            ///// 
            //var tempqueue = _queueService.GetQueueByQueueIdentifier(queue);
            //int queueid = 0;
            //if (tempqueue != null)
            //{
            //    queueid = tempqueue.Id;
            //}

            //int caseformid = _ICommonService.GetCaseFormIdByUrl(form); 
            //DTResponseModel jsonFile = _formService.GetJsonData(TableList, dyn1, caseformid, queueid);
            //List<JObject> obj = (List<JObject>)jsonFile.data;
            ////
            //ViewBag.JsonData = obj[0];
            ///////////
            return View();
        }

        [Area("Admin")]
        [HttpPost]
        [Route("admin/form/{form}.html")]
        [Route("admin/form/{tenant_identifier}/{form}.html")]
        [Route("admin/form/{tenant_identifier}/{form}/{queue}.html")]
        public JsonResult Index(DTPostModel model, string tenant_identifier, string form, string queue)
        {
            Theme th = ViewData["Theme"] as Theme;
            //Kishan sir Code committed out
            // th.DoAction("before_case_switch", new object[] { "1", "2", "3" });
            List<CaseFormViewModel> lst = _ICommonService.GetCaseFormListForActiveTenantId();
            string search_key = "Identifier\":\"" + form;
            CaseFormViewModel lsts = lst.Where(d => d.Fields.Contains(search_key)).FirstOrDefault();
            var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };
            var allfields = JsonConvert.DeserializeObject<FormBuilderViewModel>(lsts.Fields, settings);
            List<KeyValuePair<string, string>> dyn = new List<KeyValuePair<string, string>>();
            List<KeyValuePair<string, List<string>>> dyn1 = new List<KeyValuePair<string, List<string>>>();
            List<String> TableList = new List<string>();
            foreach (var tab in allfields.Tab)
            {
                foreach (var row in tab.Row)
                {
                    foreach (var column in row.Column)
                    {
                        foreach (dynamic element in column.Element)
                        {
                            var isit = element.GetType().GetProperty("VisibleinGrid");
                            if (isit != null)
                            {
                                if (element.VisibleinGrid)
                                {
                                    TableList.Add(element.TableName);
                                    dyn.Add(new KeyValuePair<string, string>(element.BackendLabel, element.ElementId));
                                    List<String> listr = new List<string>();
                                    listr.Add(element.ElementId);
                                    listr.Add(element.FieldName);
                                    dyn1.Add(new KeyValuePair<string, List<string>>(element.TableName, listr));
                                }
                            }
                        }
                    }
                }
            }

            var tempqueue = _queueService.GetQueueByQueueIdentifier(queue);

            int queueid = 0;
            if (tempqueue != null)
            {
                queueid = tempqueue.Id;
            }

            int caseformid = _ICommonService.GetCaseFormIdByUrl(form);
            var cases = _caseService.GetFormIdsByQueue(queueid, caseformid);
            var jsonFile = _formService.GetJsonData(TableList, dyn1, caseformid, queueid);
            var formdata = jsonFile;
            return Json(new
            {
                draw = formdata.draw,
                recordsTotal = formdata.recordsTotal,
                recordsFiltered = formdata.recordsFiltered,
                data = formdata.data
            });
        }

        [Area("Admin")]
        [HttpGet]
        [Route("admin/form/{encryptedid}/{encryptedCaseid}/edit.html")]
        [Route("admin/form/{tenant_identifier}/{form}/{encryptedCaseid}/edit.html")]
        public IActionResult Edit(string encryptedCaseid, string form)
        {
            int tenantid = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());
            string view = "";
            if (_userService.UserHasPolicy() == "frontend")
            {
                string Theme = "~/Themes/" + this.Theme.GetName(false) + "/Shared/_Layout.cshtml";
                ViewBag.ThemeView = Theme;
                view = "/Themes/" + this.Theme.GetName(false) + "/Form/Edit.cshtml";
            }


            int Caseid = _utils.DecryptId(encryptedCaseid);
            try
            {
                CaseViewModel cvm = new CaseViewModel
                {
                    Id = Caseid,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now,
                    CaseGeneratedId = _formService.GenerateFormId()
                };
                var ccvm = _formBuilderService.GetBuilderFormByUrl(form, tenantid);
                int case_id = ccvm.Id;

                if (_userService.UserHasPolicy() == "frontend")
                {
                    cvm.StateId = _queueService.GetFirstState(case_id, "front");
                }
                else
                {
                    cvm.StateId = _queueService.GetFirstState(case_id, "back");
                }

                if (Caseid != 0)
                    cvm = _caseService.GetCaseById(Caseid);

                int caseformid = _ICommonService.GetCaseFormIdByUrl(form);

                string roleid = _ICommonService.GetRoleIdByUserId(_ICommonService.getLoggedInUserId());

                cvm.StateList = _queueService.GetStateSelectListByFormId(caseformid, roleid);

                cvm.CaseTasks = _queueService.GetCaseMovement(caseformid, Caseid);
                var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };
                cvm.FormBuilder = JsonConvert.DeserializeObject<FormBuilderViewModel>(ccvm.Fields, settings);
                FormBuilderViewModel a = JsonConvert.DeserializeObject<FormBuilderViewModel>(ccvm.Fields, settings);
                List<FormBuilderViewModel.Form.Table> tables = a.Forms.Tables;
                ViewBag.formData = _formService.GetTableData(Caseid, tables, a);
                if (view != "")
                    return View(view, cvm);
                return View(cvm);
            }
            catch (Exception ex)
            {
                _log.LogError("CaseFormService:Edit - " + ex.ToString());
                _status.Show("error", ex.ToString(), false);
                return View();
            }

        }

        [Area("Admin")]
        [HttpPost]
        [Route("admin/form/{encryptedid}/edit.html")]
        [Route("admin/form/{tenant_identifier}/{form}/{encryptedid}/edit.html")]
        public async Task<IActionResult> EditAsync(CaseViewModel cvm, string tenant_identifier, string form, IFormCollection formData)
        {

            try
            {
                int tenantid = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());

                string loggedinUser = _ICommonService.getLoggedInUserId();
                bool isadmin = await _ICommonService.IsSuperAdmin();

                cvm.UserId = loggedinUser;
                bool isNew = false;
                int case_id = _formBuilderService.GetBuilderFormByUrl(form, tenantid).Id;
                int prevStateId = 0;


                if (cvm.Id == 0)
                {
                    isNew = true;
                    //int case_id = _formBuilderService.GetBuilderFormByUrl(form, tenantid).Id;

                    if (_userService.UserHasPolicy() == "backend" || isadmin == true)
                    {
                        cvm.StateId = _queueService.GetFirstState(case_id, "back");
                        prevStateId = _queueService.GetFirstState(case_id, "back");
                    }
                    else
                    {
                        prevStateId = _queueService.GetFirstState(case_id, "front");
                    }

                }
                else
                {
                    cvm.StateId = _caseService.GetCaseById(cvm.Id).StateId;
                    prevStateId = cvm.StateId;
                }

                if (_userService.UserHasPolicy() == "frontend")
                {
                    if (formData["btn-type"].ToString().Equals("save", StringComparison.OrdinalIgnoreCase))
                    {
                        cvm.StateId = _queueService.GetFirstState(case_id, "front");
                    }
                    else if (formData["btn-type"].ToString().Equals("send", StringComparison.OrdinalIgnoreCase))
                    {
                        cvm.StateId = _queueService.GetFirstState(case_id, "back");
                    }

                }


                int tenantId = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());
                cvm.TenantId = tenantId;

                cvm = await _formService.SaveCaseAsync(cvm, form);
                var formdata1 = formData.Where(x => x.Key.Contains("elm")).ToList();
                _formService.UpdateFormData(formdata1, form, cvm.Id, isNew);
                cvm.StateId = _synchronizeService.SynchronizeCase(this, cvm.CaseFormId, prevStateId, cvm.StateId, form, cvm.Id);
                cvm = await _formService.SaveCaseAsync(cvm, form);


                if (ModelState.IsValid)
                {
                    _status.Show("success", "Case is succesfully saved.", false);
                    return Redirect("~/user/dashboard.html");
                }
                _utils.addModelError(ModelState);

                return Redirect("~/admin/form" + _utils.GetTenantForUrl(false) + "/" + form + "/" + _utils.EncryptId(cvm.Id) + "/edit.html");

            }
            catch (Exception ex)
            {
                _log.LogError("CaseFormService:Edit - " + ex.ToString());
                _status.Show("error", ex.ToString(), false);
                return Redirect("~/admin/form" + _utils.GetTenantForUrl(false) + "/" + form + "/" + _utils.EncryptId(cvm.Id) + "/edit.html");

            }
        }

        [Area("Admin")]
        [HttpPost]
        [Route("admin/form/{tenant_identifier}/action.html")]
        [Route("admin/form/{tenant_identifier}/{form}/action.html")]
        public async Task<IActionResult> Action(IEnumerable<int> Ids, string action, string page, string reason = "", IEnumerable<string> attachments = null, string tenant_identifier = "", string useraccessid = null)
        {
            if (string.IsNullOrEmpty(tenant_identifier))
            {
                _status.Show("error", "Please select a Tenant");
                return Redirect(page);
            }
            if (action == "")
            {
                _status.Show("error", "Please select any action from Action select box");
                return Redirect(page);
            }
            if (Ids.Count() <= 0)
            {
                _status.Show("error", "Please select atleast one item");
                return Redirect(page);
            }
            Theme th = ViewData["Theme"] as Theme;



            int successCount = 0;
            string state = "";
            int stateid = 0;
            int newstateid = 0;

            foreach (var item in Ids)
            {
                //var CaseId = Convert.ToInt32(item);
                bool result = false;

                if (item != 0)
                {
                    //th.DoAction('before_case_switch', new object[]{"ds","fdfd","fdfd" });
                    switch (action)
                    {
                        case "delete":
                            state = "deleted";
                            //result = await ICaseService.DeleteCaseById(item);
                            break;

                        case "active":
                            state = "actived";
                            //result = await ICaseService.ActiveCaseById(item);
                            break;

                        case "inactive":
                            state = "inactived";
                            //result = await ICaseService.InactiveCaseById(item);
                            break;

                        case "sendsubrogation":
                            //need shipping company data
                            //state = "sent letter";

                            //var caseData = ICaseService.GetCaseById(item);
                            //string messagebody = templateService.GetTemplateBodyByName("claim-email-notification");
                            //messagebody = templateService.GenerateTemplate(messagebody, caseData);
                            //string newmsg = templateService.GenerateTemplate(messagebody, caseData);
                            //if (messagebody != null)
                            //{
                            //    //replace message details
                            //    //messagebody = messagebody.Replace("[user_name]", caseData.FullName);

                            //    var newMessage = new TemplateViewModel { };
                            //    newMessage.Content = messagebody;

                            //    string body = await razorToStringRender.RenderViewToStringAsync("Areas/Admin/Views/Email/TemplateEmail.cshtml", newMessage);

                            //    string url = "wwwroot/uploads/";

                            //    List<string> imagesurl = new List<string>();

                            //    foreach (var itemImages in attachments)
                            //    {
                            //        imagesurl.Add(url + itemImages);
                            //    }

                            //    string letterAttachment = null;

                            //    try
                            //    {
                            //        letterAttachment = await ICaseService.HtmlToPdf(caseData.Id);

                            //        if (letterAttachment == null)
                            //        {
                            //            _status.Show("error", "Pdf not created.", false);
                            //        }
                            //    }
                            //    catch (Exception)
                            //    {
                            //        _status.Show("error", "Pdf not created.", false);
                            //    }

                            //    //string letterAttachment = await HtmlToPdf(caseData.Id);

                            //    if (letterAttachment != null)
                            //    {
                            //        imagesurl.Add(letterAttachment);

                            //        //client email used for now
                            //        await emailSender.SendEmailAttachmentAsync(caseData.Email, "Claim Filed", body, imagesurl);

                            //        _status.Show("success", "Email Sent Successfully.", false);
                            //        result = true;
                            //        break;
                            //    }
                            //    _status.Show("error", "Email not Sent.", false);
                            //    result = false;
                            //}

                            break;

                        default:

                            try
                            {
                                stateid = Convert.ToInt32(action);
                            }
                            catch (Exception)
                            {
                                break;
                            }

                            if (stateid != 0)
                            {

                                //case synce when state changed

                                ////var currentstate = ICaseService.GetStateIdByCaseId(item);
                                //try
                                //{
                                //    int synchronizeCheck = ICaseService.SynchronizeCase(item, stateid, "manual");
                                //    if (synchronizeCheck != 0)
                                //    {
                                //        newstateid = synchronizeCheck;
                                //    }

                                //}
                                //catch (Exception ex)
                                //{
                                //    break;
                                //}

                                //try
                                //{
                                //    if (newstateid != 0)
                                //    {
                                //        int synchronizeCheck = ICaseService.SynchronizeCase(item, newstateid, "auto");
                                //        if (synchronizeCheck != 0)
                                //        {
                                //            newstateid = synchronizeCheck;
                                //        }
                                //    }

                                //}
                                //catch (Exception ex)
                                //{
                                //    break;
                                //}

                                //if (newstateid != 0)
                                //{
                                //    state = queueService.GetStateNameById(newstateid);
                                //    stateid = newstateid;
                                //}
                                //else
                                //{
                                //    newstateid = stateid;
                                //}

                                if (string.IsNullOrWhiteSpace(useraccessid))
                                {
                                    useraccessid = null;
                                }

                                int tenantid = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());
                                //if (!string.IsNullOrWhiteSpace(useraccessid))
                                //{
                                //    var loggeduser = _ICommonService.getLoggedInUserId();
                                //    string roleid = _ICommonService.GetRoleIdByUserId(loggeduser);
                                //    string rolecheck = _queueService.GetStateById(tenantid, newstateid).RoleId;

                                //    if (rolecheck.Equals(roleid, StringComparison.OrdinalIgnoreCase))
                                //    {
                                //        useraccessid = loggeduser;
                                //    }
                                //}

                                //change stateid to new stateid for sync component
                                var caseModel = _caseService.GetCaseById(item);
                                int newStateId = _synchronizeService.SynchronizeCase(this, caseModel.CaseFormId, caseModel.StateId, stateid, caseModel.CaseFormUrl, item);
                                result = await _caseService.CaseStateChangeById(item, newStateId, reason, useraccessid);
                                if (result == true)
                                {
                                    int newautoState = _automationService.CaseAutomationSystem(this, caseModel.CaseFormId, caseModel.StateId, stateid, caseModel.CaseFormUrl, item);
                                    if (newautoState != stateid && newautoState!= caseModel.StateId)
                                    {
                                        result = await _caseService.CaseStateChangeById(item, newautoState, "Case Automation!!", useraccessid);
                                    }
                                    //int tenantid = commonService.GetTenantIdByIdentifier(tenant_identifier);
                                    var stateForPermission = _queueService.GetStatePermissionsById(tenantid, stateid);



                                    if (stateForPermission.NotifyUser == true)
                                    {
                                        //string message = _templateService.GetTemplateBodyByName("claim-email-notification");
                                        //message = _templateService.GenerateTemplate(message, caseModel);

                                        //if (message != null)
                                        //{
                                        //    //replace message details
                                        //    //message = message.Replace("[user_name]", caseModel.FullName);

                                        //    var messageNew = new TemplateViewModel { };
                                        //    messageNew.Content = message;

                                        //    string body = await razorToStringRender.RenderViewToStringAsync("Areas/Admin/Views/Email/TemplateEmail.cshtml", messageNew);

                                        //    string url = "wwwroot/uploads/";

                                        //    List<string> imagesurl = new List<string>();

                                        //    foreach (var itemImages in attachments)
                                        //    {
                                        //        imagesurl.Add(url + itemImages);
                                        //    }

                                        //    await emailSender.SendEmailAttachmentAsync(caseModel.Email, "Claim Filed", body, imagesurl);

                                        //    _status.Show("success", "Email Sent Successfully.", false);


                                        //}

                                    }

                                    if (_queueService.IsStateInRole(stateid) == false && page == null)
                                    {
                                        return Json("state");
                                    }
                                }
                            }
                            break;
                    }

                    if (result)
                    {
                        successCount++;
                    }
                }

            }

            if (stateid == newstateid)
            {
                if (successCount == Ids.Count())
                {
                    _status.Show("success", Ids.Count() + " case(s) " + state + " successfully.");
                }
                else if (successCount > 0)
                {
                    _status.Show("info", successCount + " case(s) " + state + " successfully.");
                }
                else
                {
                    _status.Show("error", successCount + " case(s) " + state + " successfully.");
                }
            }
            else
            {
                _status.Show("error", successCount + " case(s) rejected.");
            }


            if (!string.IsNullOrEmpty(page))
            {
                return Redirect(page);
                // return Redirect("~/admin" + utils.GetTenantForUrl(false) + "/cases.html");
            }
            else
            {
                if (action == "delete")
                {
                    return Json("deleted");
                }
                return Json("success");
            }

            //return Redirect(page);
        }

        /// <summary>
        /// View
        /// </summary>
        /// <returns></returns>
        /// To View Case Form 
        [Area("Admin")]
        [HttpGet]
        [Route("admin/formview/{encryptedid}/view1.html")]
        [Route("admin/formview/{tenant_identifier}/{form}/{encryptedid}/view1.html")]
        public IActionResult View1(string encryptedid, string tenant_identifier, string form)
        {
            CaseFrontViewModel cvm = new CaseFrontViewModel();

            string vp = "/Themes/" + this.Theme.GetName(false) + "/form/View.cshtml";
            try
            {
                int tenantid = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());

                string loggedinUser = _ICommonService.getLoggedInUserId();
                cvm.UserId = loggedinUser;
                bool isNew = false;
                if (cvm.Id == 0)
                {
                    isNew = true;
                    int case_id = _formBuilderService.GetBuilderFormByUrl(form, tenantid).Id;

                    if (_userService.UserHasPolicy() == "frontend")
                    {
                        cvm.StateId = _queueService.GetFirstState(case_id, "front");
                    }
                    else
                    {
                        cvm.StateId = _queueService.GetFirstState(case_id, "back");
                    }

                }
                else
                {
                    cvm.StateId = _caseService.GetCaseById(cvm.Id).StateId;
                }


                int tenantId = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());
                cvm.TenantId = tenantId;
                //cvm =   _formService.SaveCaseAsync(cvm, form);
            }
            catch (Exception ex)
            {

            }

            return View(vp, cvm);
        }

        /// <summary>
        /// View
        /// </summary>
        /// <returns></returns>
        /// To View Case Form 
        [Area("Admin")]
        [HttpGet]
        [Route("admin/formview/{encryptedid}/view.html")]
        [Route("admin/formview/{tenant_identifier}/{form}/{encryptedid}/view.html")]
        public IActionResult View(string encryptedid, string tenant_identifier, string form)
        {
            string vp = "/Themes/" + this.Theme.GetName(false) + "/form/View.cshtml";
            int tenantid = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());
            string view = "";
            if (_userService.UserHasPolicy() == "frontend")
            {
                string Theme = "~/Themes/" + this.Theme.GetName(false) + "/Shared/_Layout.cshtml";
                ViewBag.ThemeView = Theme;
                view = "/Themes/" + this.Theme.GetName(false) + "/Form/Edit.cshtml";
            }


            int Caseid = _utils.DecryptId(encryptedid);
            try
            {
                CaseViewModel cvm = new CaseViewModel();
                if (Caseid != 0)
                {
                    if (_userService.UserHasPolicy() == "frontend")
                    {
                        cvm.StateId = _queueService.GetFirstState(Caseid, "front");
                    }
                    else
                    {
                        cvm.StateId = _queueService.GetFirstState(Caseid, "back");
                    }


                    cvm = _caseService.GetCaseById(Caseid);

                    int caseformid = cvm.CaseFormId;

                    string roleid = _ICommonService.GetRoleIdByUserId(_ICommonService.getLoggedInUserId());

                    cvm.StateList = _queueService.GetStateSelectListByFormId(caseformid, roleid);

                    cvm.CaseTasks = _queueService.GetCaseMovement(caseformid, Caseid);

                    var ccvm = _formBuilderService.GetBuilderFormById(caseformid);
                    var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };
                    cvm.FormBuilder = JsonConvert.DeserializeObject<FormBuilderViewModel>(ccvm.Fields, settings);
                    FormBuilderViewModel a = JsonConvert.DeserializeObject<FormBuilderViewModel>(ccvm.Fields, settings);
                    List<FormBuilderViewModel.Form.Table> tables = a.Forms.Tables;
                    ViewBag.formData = _formService.GetTableData(Caseid, tables, a);

                }

                if (view != "")
                    return View(vp, cvm);
                return View(vp, cvm);
            }
            catch (Exception ex)
            {
                _log.LogError("CaseFormService:Edit - " + ex.ToString());
                _status.Show("error", ex.ToString(), false);
                return View();
            }
        }

        [Area("Admin")]
        [HttpGet]
        [Route("admin/country-list")]
        [Route("admin/{tenant_identifier}/country-list")]
        public JsonResult GetCountryList()
        {

            var caseList = _ICommonService.CountryList();

            return Json(caseList);
        }


        ///front End Setting 
        [Area("Admin")]
        [HttpGet]
        [Route("/admin/form/changecaseform.html")]
        public IActionResult changecaseform()
        {

            string Theme = "~/Themes/" + this.Theme.GetName(false) + "/Shared/_Layout.cshtml";
            //ViewBag.Count = tenantConfig.GetTenantConfigCount();
            //var dashboardData = _dashboardService.GetDashboard();
            //dashboardData.LastFourActivities = await activityLogService.GetActivityLogAsync();
            ViewBag.ThemeView = Theme;
            return View();
        }
        ///End Front End Setting
        ///
        /// Delete Case
        [Area("Admin")]
        [HttpGet]
        [Route("admin/form/{encryptedid}/{encryptedCaseid}/delete.html")]
        [Route("admin/form/{tenant_identifier}/{form}/{encryptedCaseid}/delete.html")]
        public IActionResult Delete(string encryptedCaseid, string form)
        {
            int tenantid = _ICommonService.GetTenantIdByIdentifier(_utils.GetTenantFromSession());
            string view = "";
            if (_userService.UserHasPolicy() == "frontend")
            {
                string Theme = "~/Themes/" + this.Theme.GetName(false) + "/Shared/_Layout.cshtml";
                ViewBag.ThemeView = Theme;
                view = "/Themes/" + this.Theme.GetName(false) + "/Form/Edit.cshtml";
            }


            int Caseid = _utils.DecryptId(encryptedCaseid);
            try
            {
                CaseViewModel cvm = new CaseViewModel();
                if (Caseid != 0)
                {

                    cvm = _caseService.GetCaseById(Caseid);
                    int caseformid = cvm.CaseFormId;

                    var ccvm = _formBuilderService.GetBuilderFormById(caseformid);
                    var settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };
                    cvm.FormBuilder = JsonConvert.DeserializeObject<FormBuilderViewModel>(ccvm.Fields, settings);
                    FormBuilderViewModel a = JsonConvert.DeserializeObject<FormBuilderViewModel>(ccvm.Fields, settings);
                    _formService.DeleteFromData(a, Caseid);
                    _caseService.DeleteCase(cvm);
                }
                return Redirect("~/user/dashboard.html");
            }
            catch (Exception ex)
            {
                _log.LogError("CaseFormService:Edit - " + ex.ToString());
                _status.Show("error", ex.ToString(), false);
                return Redirect("~/user/dashboard.html");
            }

        }

        /// 

    }
}