@using Themes.Core.Components
@using Cicero.Service.Services
@using Cicero.Service.Helpers
@using Cicero.Service.Models.Core
@inject IRoleService roleService
@inject IQueueService queueService
@inject Permission Permission
@inject IFormBuilderService formBuilderService
@inject ICommonService commonService
@inject ISynchronizeService synchronizeService
@inject Utils utils

@{
    AssignValue assignSystem = Model as AssignValue;
    var loggedUser = commonService.getLoggedInUserId();
    string roleId = commonService.GetRoleIdByUserId(loggedUser);
}
<style>
    .hidePart {
        display: none;
    }
</style>
<form class="widgets-body sync-wrap">
    <li class="widget-location dashed-border active on" data-component-id="@assignSystem.ComponentId" data-type="@assignSystem.ComponentType" style="display:none"></li>
    <div class="row mb-2">
        <div class="form-group col-lg-6">
            <label>Title</label>
            <input type="text" name="Title" class="form-control" value="@assignSystem.Title">
        </div>
        <div class="form-group col-lg-6">
            <label>Form</label>
            <select class="form-control custom-select case-destination" name="FormId" value="@assignSystem.FormId" disabled>
                <option value="">Choose Form</option>
                @foreach (var item in formBuilderService.FormList("" + utils.GetTenantFromSession() + ""))
                {
                    if (assignSystem.FormId == item.Value)
                    {
                        <option selected="selected" value="@item.Value">@item.Text</option>
                    }
                    else
                    {
                        <option value="@item.Value">@item.Text</option>
                    }

                }
            </select>
        </div>

    </div>
    <div class="tenant-database">
        <div class="source-map">
            <p class="text-muted small">
                Please assign value by selecting source table and its respective fields.
            </p>
            <div class="table-responsive">
                <table id="case-map-table" class="table">
                    <thead>
                        <tr>

                            <th class="text-uppercase font-weight-light" width="44%">Source</th>
                            <th class="text-uppercase font-weight-light" width="44%">Values</th>
                            <th width="12%" style="vertical-align:middle"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int dnumber;




                            if (Int32.TryParse(assignSystem.FormId, out dnumber))
                            {
                                //  List<FormBuilderViewModel.Form.Table> sourcetables = formBuilderService.GetFormTable(snumber);
                                List<FormBuilderViewModel.Form.Table> destinationtables = formBuilderService.GetFormTable(dnumber);
                                string sourceTableSelected = string.Empty;
                                FormBuilderViewModel.Form.Table destTableSelected = new FormBuilderViewModel.Form.Table();
                                // List<FormBuilderViewModel.Form.Table> policytable = formBuilderService.GetFormTable(dnumber);
                                //destinationfields.AddRange(formBuilderService.GetFormFields(dnumber));
                                if (assignSystem.SourceTable != null)
                                {
                                    for (int i = 0; i < assignSystem.SourceTable.Count; i++)
                                    {
                                        string selectedType = "";
                                        <tr>

                                            <td>
                                                <div class="row">
                                                    <div class="col-lg-6">
                                                        <label>Source Table</label>
                                                        <select class="custom-select custom case-type-destination-table" name="SourceTable[]">
                                                            <option value="">Please select Table</option>
                                                            @foreach (FormBuilderViewModel.Form.Table item in destinationtables)
                                                            {
                                                                if (assignSystem.SourceTable[i] == item.Name)
                                                                {
                                                                    destTableSelected = item;
                                                                    <option selected="selected" value="@item.Name">@item.Name</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@item.Name">@item.Name</option>
                                                                }

                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="col-lg-6">
                                                        <label>Source Field</label>
                                                        <select class="custom-select custom case-type-destination" name="SourceField[]">
                                                            <option value="">Please select Field</option>
                                                            @if (destTableSelected.Fields != null)
                                                            {
                                                                foreach (FormBuilderViewModel.Form.Field dField in destTableSelected.Fields)
                                                                {
                                                                    if (assignSystem.SourceField[i] == dField.Name)
                                                                    {
                                                                        <option selected="selected" value="@dField.Name" data-type="@dField.Type">@dField.Name</option>
                                                                        selectedType = dField.Type;
                                                                    }
                                                                    else
                                                                    {
                                                                        <option value="@dField.Name" data-type="@dField.Type">@dField.Name</option>
                                                                    }
                                                                }
                                                            }

                                                        </select>
                                                    </div>
                                                </div>


                                            </td>


                                            <td>
                                                <div class="row">
                                                    <div class="col-lg-12">
                                                        <label>Value</label>
                                                        @{
                                                            switch (selectedType)
                                                            {
                                                                case "decimal":
                                                                    <input type="number" value="@assignSystem.Values[i]" class="form-control" name="Values[]" />
                                                                    break;
                                                                case "integer":
                                                                    <input type="number" value="@assignSystem.Values[i]" class="form-control" name="Values[]" />
                                                                    break;
                                                                case "string":
                                                                    <input type="text" value="@assignSystem.Values[i]" class="form-control" name="Values[]" />
                                                                    break;
                                                                case "date":
                                                                    <input type="text" value="@assignSystem.Values[i]" class="form-control date" name="Values[]" />
                                                                    break;
                                                                default:
                                                                    <input type="text" value="@assignSystem.Values[i]" class="form-control" name="Values[]" />
                                                                    break;
                                                            }
                                                        }
                                                    </div>

                                                </div>
                                            </td>


                                            <td class="delete-row"><i class="ri-delete-bin-line" title="Remove" onclick="deleteRow(this)"></i></td>

                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td>
                                            <div class="row form-row">
                                                <div class="col-lg-6">
                                                    <label>Source Table</label>
                                                    <select class="custom-select custom case-type-destination-table" name="SourceTable[]">
                                                        <option value="">Please select Table</option>
                                                        @foreach (FormBuilderViewModel.Form.Table item in destinationtables)
                                                        {
                                                            <option value="@item.Name">@item.Name</option>
                                                        }

                                                    </select>

                                                </div>
                                                <div class="col-lg-6">
                                                    <label>Source Field</label>
                                                    <select class="custom-select custom case-type-destination" name="SourceField[]">
                                                        <option value="">Please select Field</option>

                                                    </select>
                                                </div>
                                            </div>


                                        </td>
                                        <td>
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label>Value</label>
                                                    <input type="text" value="" class="form-control" name="Values[]" />
                                                </div>

                                            </div>
                                        </td>

                                        <td><i class="ri-delete-bin-line" title="Remove" onclick="deleteRow(this)"></i></td>
                                    </tr>
                                }




                            }

                        }

                    </tbody>
                </table>
            </div>
            <div class="add-row-btn">
                <button type="button" class="btn btn-link btn-sm addItem" id="addItem" onclick="cloneRow(this)"> <i class="ri-add-fill mr-1"></i> Add new row</button>
            </div>
        </div>

    </div>


</form>

<script type="text/javascript">


    function autoCasePull() {
        $(".case-pull").on("change", function () {
            topper = $(this).closest(".sync-wrap");
            val = topper.find(".case-destination").val();
            autoGetStates(val, topper, $(this).val(), ".case-pass");
        })
    }

    function autoGetStates(caseFormId, topper, removeOption, field) {
        $.ajax({
            async: false,
            type: "GET",
            url: '/admin/getStateByFormId',
            data: { caseformid: caseFormId },
            dataType: "json",
            success: function (response) {
                topper.find(field).html("");
                topper.find(field).append("<option value=''>Please select</option>");
                if (response.length > 0) {
                    for (i = 0; i < response.length; i++) {
                        if (response[i].value != removeOption) {
                            topper.find(field).append("<option value='" + response[i].value + "'>" + response[i].text + "</option>");
                        }
                    }
                }
            },
            error: function (response) {
            }
        });
    }
    //on case source change event
    $('.case-source').on('change', function () {

        topper = $(this).closest(".sync-wrap");
        //topper.find('#case-map-table > tbody').find('tr').not('.hide').remove();
        //caseTable(topper);
        getCaseTables($(this).val(), "source", topper);
        getCaseTables($(this).val(), "policy", topper);
        casePolicyFieldChangeInit();
    });

    //on change case-enable event
    $('.case-destination').on('change', function () {
        topper = $(this).closest(".sync-wrap");
        //  topper.find('#case-map-table > tbody').find('tr').not('.hide').remove();
        // caseTable(topper);
        getCaseTables($(this).val(), "destination", topper);
        getCaseTables($(this).val(), "policy-dest", topper);
        topper.find("#case-map-table > tbody tr.hide").show();
        sourceTableChangeInit();
        destinationTableChangeInit();
        casePolicyFieldChangeInit();
        casePolicyFieldDestChangeInit();
        autoGetStates($(this).val(), topper, "", ".case-pull");
        // autoGetStates($(this).val(), topper, "", ".case-pass");
        autoGetStates($(this).val(), topper, "", ".case-fail");
        topper.find("#addItem").removeAttr("disabled");
        topper.find("#addItem").attr("onclick", "cloneRow(this)");
    });

    //on change case-source event
    $('.case-type-source-main').on('change', function () {
        topper = $(this).closest(".sync-wrap");
        caseTypeSource(topper);
    });



    //add new row
    function cloneRow(item) {
        //debugger;
        topper = $(item).closest(".sync-wrap");
        sourceTableChangeUnbind(topper);
        destinationTableChangeUnbind(topper);
        var lastrow = topper.find("#case-map-table > tbody tr:last");
        if (lastrow.length == 0) {
            topper.find("#case-map-table >tbody").append('<tr class="hide" style="display:none">'
                + '<td>'
                + '<div class="row form-row">'
                + '<div class="col-lg-6"><label>Source Table</label><select class="custom-select custom case-type-source-table" name="Configs[0][sourcetable]">'
                + '<option value="">Please select Table</option></select>'
                + ' </div>'
                + ' <div class="col-lg-6"><label>Source Field</label>'
                + '<select class="custom-select custom case-type-source" name="configs[0][sourcefield]"> <option value="">Please select Field</option>'
                + ' </select></div></div> </td>'
                + ' <td>'
                + '<div class="row"> <div class="col-lg-6">  <label>Destination Table</label>'
                + ' <select class="custom-select custom case-type-destination-table" name="Configs[0][destinationtable]">'
                + ' <option value="">Please select Table</option>  </select> </div>'
                + ' <div class="col-lg-6"><label> Destination Field</label>'
                + ' <select class="custom-select custom case-type-destination" name="configs[0][destinationfield]">'
                + ' <option value="">Please select Field</option></select></div></div>'
                + ' </td>'
                + '<td class="delete-row"><i class="ri-delete-bin-line" title="Remove" onclick="deleteRow(this)"></i></td></tr>');
            topper.find(".case-source").trigger('change');
            topper.find(".case-destination").trigger('change');
        }
        else {
            lastrow.clone().removeClass("hide").insertAfter(lastrow);
            lastrow = topper.find("#case-map-table > tbody tr:last");
            lastrow.find("input[name='Values[]']").val("");
        }

        sourceTableChangeInit();
        destinationTableChangeInit();
        fieldChange();
    }

    function clonePolicy(item) {
        topper = $(item).closest(".sync-wrap");
        topper.find(".case-policy-table").unbind();
        topper.find(".case-policy-field").unbind();
        topper.find(".case-policy-dest-table").unbind();
        topper.find(".case-policy-dest-field").unbind();
        var lastrow = topper.find("#mainPolicy > .row:last");
        lastrow.clone().insertAfter(lastrow);
        casePolicyFieldChangeInit();
        casePolicyFieldDestChangeInit();
    }
    function deletePolicyRow(obj) {
        topper = $(obj).closest(".sync-wrap");
        if (topper.find("#mainPolicy > .row").length == 2) {
            toastr.warning("This can't be deleted");
        }
        else {
            $(obj).parents(".policy").remove();
        }

    }
    function deleteRow(obj) {

        $(obj).parents("tr").remove();
        console.log("yes")
    }
    //init case-policy-field-table
    function casePolicyFieldChangeInit() {
        $(".case-policy-table").on("change", function () {
            topper = $(this).closest(".sync-wrap");
            //  debugger;
            var field = $(this).closest(".row").find(".case-policy-field");
            getSourceTableFields($(this).val(), field);
        });
    }
    function casePolicyFieldDestChangeInit() {
        $(".case-policy-dest-table").on("change", function () {
            topper = $(this).closest(".sync-wrap");
            //  debugger;
            var field = $(this).closest(".row").find(".case-policy-dest-field");
            getCaseTableFields(topper.find(".case-destination").val(), $(this).val(), field);
        });
    }

    //init sourcetable change event
    function sourceTableChangeInit() {
        $(".case-type-source-table").on("change", function () {
            var field = $(this).closest("tr").find(".case-type-source");
            topper = $(this).closest(".sync-wrap");
            getSourceTableFields($(this).val(), field);

        });
    }




    //remove source table change events
    function sourceTableChangeUnbind() { $(".case-type-source-table").unbind(); }

    //remove destination table events
    function destinationTableChangeUnbind() { $(".case-type-destination-table").unbind(); }

    //init destinationtable change event
    function destinationTableChangeInit() {
        $(".case-type-destination-table").on("change", function () {
            // debugger;
            topper = $(this).closest(".sync-wrap");
            var field = $(this).closest("tr").find(".case-type-destination");
            getCaseTableFields(topper.find(".case-destination").val(), $(this).val(), field);
        });
    }

    //hide show function for case source selected
    function caseTypeSource(topper) {
        if (topper.find(".case-type-source-main option:selected").val() != "") {
            topper.find("#case-require-auth").parent().show();
        }
        else {
            topper.find("#case-require-auth").parent().hide();
        }
        if (topper.find(".case-type-source-main option:selected").val() == "tenant-database") {
            topper.find(".case-tenant").parent().parent().removeAttr('style', 'display:none !important');
        } else {
            topper.find(".case-tenant").parent().parent().attr('style', 'display:none !important');
        }
    };

    //on case tenant select
    $(document).on("change", ".case-tenant", function () {
        // debugger
        topper = $(this).closest(".sync-wrap");
        caseSource(topper);
    });

    //populate case type by tenant
    function caseSource(topper) {
        var selectedTenant = topper.find(".case-tenant").val();
        if (selectedTenant != null && selectedTenant != '') {
            $.getJSON(CiceroVars.base_url + "form-list-source", { selected_tenant_id: selectedTenant }, function (types) {
                if (types != null && !jQuery.isEmptyObject(types)) {
                    var typeSelect = topper.find(".case-source");
                    typeSelect.empty();
                    typeSelect.append($('<option/>', {
                        value: null,
                        text: "Please select Case Type"
                    }));
                    $.each(types, function (index, types) {
                        typeSelect.append($('<option/>', {
                            value: types.value,
                            text: types.text
                        }));
                    });
                };
            });
        }
    };




    //hide show function for case enabled
    function caseTable(topper) {
        if (topper.find(".case-source option:selected").val() != null && topper.find(".case-source option:selected").val() != "") {
            topper.find("#case-map-table").parent().show();
            topper.find(".case-pull").parent().parent().removeAttr('style', 'display:none !important');
            topper.find(".case-policy-field").parent().show();
            topper.find(".case-process").parent().show();
        } else {
            topper.find("#case-map-table").parent().hide();
            topper.find(".case-pull").parent().parent().attr('style', 'display:none !important');
            topper.find(".case-policy-field").parent().hide();
            topper.find(".case-process").parent().hide();
        }
    };




    function getCaseTables(selectedcase, type, topper) {
        $.ajax({
            async: false,
            type: "GET",
            url: '/admin/getcreatedtable',
            data: { caseformid: selectedcase },
            dataType: "json",
            success: function (response) {
                if (response.length > 0) {
                    var typeSelect;
                    if (type == "source") {
                        typeSelect = topper.find(".case-type-source-table");
                    }
                    else if (type == "destination") {
                        typeSelect = topper.find(".case-type-destination-table");
                    }
                    else if (type == "policy") {
                        typeSelect = topper.find(".case-policy-table");
                    }
                    else {
                        typeSelect = topper.find(".case-policy-dest-table");
                    }
                    typeSelect.empty();
                    typeSelect.append($('<option/>', {
                        value: null,
                        text: "Please select Field"
                    }));

                    for (i = 0; i < response.length; i++) {
                        typeSelect.append($('<option/>', {
                            value: response[i].name,
                            text: response[i].name
                        }));
                    }
                }
            },
            error: function (response) {
            }
        });
        //$.getJSON(CiceroVars.base_url + "getcreatedtable", { caseformid: selectedcase }, function (types) {
        //     if (types != null && !jQuery.isEmptyObject(types)) {
        //         //console.log(types);
        //         var typeSelect = jQuery("#case-policy-field");
        //         typeSelect.empty();
        //         typeSelect.append($('<option/>', {
        //             value: null,
        //             text: "Please Select Field"
        //         }));
        //         $.each(types, function (index, types) {
        //             typeSelect.append($('<option/>', {
        //                 value: types.value,
        //                 text: types.text
        //             }));
        //         });
        //     };
        // });
    };

    function getSourceTableFields(selectedtable, field) {
        $.ajax({
            async: false,
            type: "GET",
            url: '/admin/sync-source-table-column',
            data: { tableName: selectedtable },
            dataType: "json",
            success: function (response) {

                if (response.length > 0) {
                    var typeSelect = field;
                    typeSelect.empty();
                    typeSelect.append($('<option/>', {
                        value: null,
                        text: "Please select Field"
                    }));

                    for (i = 0; i < response.length; i++) {
                        typeSelect.append($('<option/>', {
                            value: response[i],
                            text: response[i]
                        }));
                    }
                }
            },
            error: function (response) {
            }
        });

    }
    function destroyDatePicker() {
        $('.date').destroyDatePicker();
    }
    function initDatePicker() {
        $('.date').daterangepicker({
            "singleDatePicker": true,
            locale: {
                format: 'DD MMMM, YYYY'
            }
        });
        $(".date").on('keydown paste', function (e) {
            e.preventDefault();
            return false;
        });
    }
    function getCaseTableFields(selectedcase, selectedtable, field) {

        $.ajax({
            async: false,
            type: "GET",
            url: '/admin/gettablefields',
            data: { caseformid: selectedcase, tablename: selectedtable },
            dataType: "json",
            success: function (response) {
                console.log(response);
                if (response.length > 0) {
                    var typeSelect = field;
                    typeSelect.empty();
                    typeSelect.append($('<option/>', {
                        value: null,
                        text: "Please select Field"
                    }));

                    for (i = 0; i < response.length; i++) {
                        typeSelect.append('<option data-type="' + response[i].type + '" value="' + response[i].name + '">' + response[i].name + '</option>');
                    }
                }
            },
            error: function (response) {
            }
        });

        //$.getJSON(CiceroVars.base_url + "getcreatedtable", { caseformid: selectedcase, tablename: selectedtable }, function (types) {
        //    if (types != null && !jQuery.isEmptyObject(types)) {
        //        //console.log(types);
        //        var typeSelect = jQuery("#case-policy-field");
        //        typeSelect.empty();
        //        typeSelect.append($('<option/>', {
        //            value: null,
        //            text: "Please Select Field"
        //        }));
        //        $.each(types, function (index, types) {
        //            typeSelect.append($('<option/>', {
        //                value: types.value,
        //                text: types.text
        //            }));
        //        });
        //    };
        //});
    };

    function fieldChange() {
        //debugger;
        $(".case-type-destination").unbind("change");
        $(".case-type-destination").on("change", function () {
            // debugger;
            var type = $(this).find("option:selected").attr("data-type");
            var inp = $(this).parents("tr").find("input[name='Values[]']");
            $(inp).removeClass("date");
            $(inp).unbind(".daterangepicker");
            $(inp).val("");
            $(inp).unbind("keydown").on("keydown", function (e) { });
            console.log(type);
            switch (type) {
                case "decimal":
                    $(inp).attr("type", "number");
                    break;
                case "integer":
                    $(inp).attr("type", "number");
                    break;
                case "string":
                    $(inp).attr("type", "text");
                    break;
                case "date":
                    $(inp).attr("type", "text");
                    $(inp).addClass("date");
                    initDatePicker();

                    break;
                default:
                    $(inp).attr("type", "text");
                    break;
            }
            // initDatePicker();
        });

    }

    $(function () {

        sourceTableChangeInit();
        destinationTableChangeInit();
        casePolicyFieldChangeInit();
        casePolicyFieldDestChangeInit();

        autoCasePull();
        // $(".case-source").trigger('change');
        // $(".case-destination").trigger('change');

        fieldChange();
        $(".sourceType").on("change", function () {

            topper = $(this).closest(".sync-wrap");
            value = $(this).val();
            if (value == "rest-api") {
                topper.find(".rest-api").removeClass("hidePart");
                topper.find(".tenant-database").addClass("hidePart");
            }
            else if (value == "tenant-database") {
                topper.find(".tenant-database").removeClass("hidePart");
                topper.find(".rest-api").addClass("hidePart");
            }
            else {
                topper.find(".tenant-database").addClass("hidePart");
                topper.find(".rest-api").addClass("hidePart");
            }
        });
        initDatePicker();
    })
</script>