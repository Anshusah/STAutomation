@using Cicero.Service.Services
@using Cicero.Service.Models
@using Cicero.Service.Helpers
@using Cicero.Service.Models.Core;
@model CaseViewModel
@inject Utils _Utils
@inject ICommonService _commonService
@inject Permission Permission
@inject IUserService _iUserService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    if (ViewBag.ThemeView != null && ViewBag.ThemeView != "")
    {
        Layout = ViewBag.ThemeView;
    }

    ViewBag.Title = Utils.CreateOrEdit(Model) + " CaseForm";
    dynamic data = new object();
    if (Model.Id != 0)
    {
        data = Json.Serialize((dynamic)ViewBag.formData);
    }
    FormBuilderViewModel fbvm = Model.FormBuilder as FormBuilderViewModel;

    Cicero.Service.Models.Core.FormBuilder FB = new Cicero.Service.Models.Core.FormBuilder() { FormData = fbvm, Side = "backend", HttpContext = HttpContextAccessor.HttpContext };

}
<link href="~/scrollable-tab plugin/jquery.scrolling-tabs.min.css" rel="stylesheet" />
<link href="~/flag-icon/css/flag-icon.min.css" rel="stylesheet" />


<style>
    .repeat-item-body .repeatItem {
        display: block !important;
    }

    .repeatItem {
        display: none;
    }

    .scrtabs-tab-container {
        display: flex;
        flex-grow: 1;
        overflow: hidden;
        border-bottom: 1px solid #D4D4D4;
    }

    .scrtabs-tabs-fixed-container ul.nav-tabs > li {
        margin-bottom: 0;
    }

    .scrtabs-tab-scroll-arrow {
        border: 0;
        padding-top: 0;
        width: 2.5rem;
        height: 100%;
        color: var(--gray);
        font-size: 1rem;
    }

        .scrtabs-tab-scroll-arrow:hover {
            background: #fff;
        }

        .scrtabs-tab-scroll-arrow span {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
        }

    .main-content {
        overflow: hidden;
    }
</style>
<script>
    var prevCount = 1;
</script>
<script>
    var prevCount = 1;
    //for formbuilder-element js value init
    var form = '@_Utils.GetParams("Form")';
    var formTagName = "form-to-save";
    //for formbuilder-element js value init end
</script>
<!-- main content starts -->
<script src="~/js/jquery.inputmask.min.js"></script>
<script src="~/js/inputmask.min.js"></script>
<script src="~/js/inputmask.binding.js"></script>
<div class="absolute-fill">
    <div class="page-wrapper">
        <div class="page-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-none p-0">
                    <li class="breadcrumb-item">
                        <a href="@Url.Content(" ~/admin"+_Utils.GetTenantForUrl(false) +".html")">Home</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="@Url.Content(" ~/admin"+_Utils.GetTenantForUrl(false) +"/cases.html")">Claims</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">@Utils.CreateOrEdit(Model) Claim</li>
                </ol>
            </nav>
            <div class="page-header__main" id="myHeader">
                <h3 class="page-title">Cicero Claims Technology</h3>
                @*@if ((Model.Id == 0 && Permission.Can(UserCan.Create_Claim)) || (Model.Id != 0 && Permission.Can(UserCan.Update_Claim)))
                    {
                    <div class="page-actionbtns">
                        <button type="submit" id="save-form" class="btn btn-primary btn-block">Save Changes</button>
                    </div>
                    }*@
            </div>
        </div>
        @Html.AntiForgeryToken()
        @*<div asp-validation-summary="All" class="text-danger mt-2"></div>*@

        @*<input type="hidden" name="Id" id="case_id" value="@Model.CaseFormId" />*@
        <div class="page-content">
            <div class="page-container grid-vertical-viewport claim-item-container">
                <div class="page-overview">
                    <div class="claim-item-wrapper">
                        <div class="claim-item-header">
                            <h4 class="claim-item-title">Transaction # : <span class="claim-id">@Model.CaseGeneratedId</span></h4>
                            @if (Model != null && Model.CaseTasks != null)
                            {
                                <form action="@Url.Content("~/admin/form"+_Utils.GetTenantForUrl(false)+"/"+_Utils.GetParams("form")+"/action.html")" id="editAction" method="post" class="claim-item-actions">
                                    <div class="form-inline">
                                        <label for="inputAddress" class="sr-only">Select Action</label>
                                        <input type="text" id="page" name="page" value="@Url.Content("~/admin/form/"+_Utils.GetTenantForUrl(true) + _Utils.GetParams("form") + "/" + _Utils.EncryptId(Model.Id) +"/edit.html")" hidden>
                                        <input type="hidden" id="Ids" name="Ids[]" value="@Model.Id" />
                                        <input type="hidden" id="elmloggedInUser" name="elmLoggedInUser" elm-name="elmLoggedInUser" value="@_commonService.getLoggedInUserId()" />
                                        <select class="custom-select mr-2 custom" name="action" id="action" asp-items="Model.CaseTasks">
                                            <option value="">Select Action</option>
                                        </select>
                                        <button name="apply" id="case_action" type="button" data-confirm='{OnInit:function(){this.size="";this.title="Confirm"; this.content="Are you sure you want to apply selected action?";this.button.cancel="Cancel";this.button.confirm="Confirm Apply";this.open();},OnConfirm:function(){Cicero.Form.ApplyAction()},OnCancelled:function(){this.close();}}' class="btn btn-secondary">Apply</button>

                                    </div>
                                </form>
                            }
                        </div>
                        <div class="claim-item-status">
                            <div class="claim-user-info">
                                @if (Model.CaseOwner != null)
                                {
                                    <div class="claim-user-image">
                                        <img class="rounded-circle" width="48" height="48" src="/uploads/@await _iUserService.GetDefaultOrFirstImagesByUserId(Model.CaseOwner.Id,"default-avatar.jpg")" alt="@Model.CaseOwner.FirstName">
                                    </div>
                                    <ul class="claim-user-info-list">
                                        <li>
                                            <label>Case owner</label>
                                            <span>@Model.CaseOwner.FirstName @Model.CaseOwner.LastName</span>
                                        </li>
                                        <li>
                                            <label>Address</label>
                                            <span>@Model.CaseOwner.Address</span>
                                        </li>
                                        <li>
                                            <label>Email address</label>
                                            <span>@Model.CaseOwner.Email</span>
                                        </li>
                                        <li>
                                            <label>Phone number</label>
                                            <span>@Model.CaseOwner.PhoneNumber</span>
                                        </li>
                                    </ul>
                                }
                                else
                                {
                                    <div class="claim-user-no-data">
                                        <div class="alert alert-warning">No Case owner assigned.</div>
                                    </div>
                                }

                            </div>
                            <div class="claim-data-status">
                                <div class="claim-data-status-info">
                                    <label>Status</label>
                                    <span>@Model.QueueName</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="page-body">
                    <form id="form-to-save" action="@Url.Content("~/admin/form/"+_Utils.GetTenantForUrl(true) + _Utils.GetParams("form") + "/" + _Utils.EncryptId(Model.Id) +"/edit.html")" method="post" enctype="multipart/form-data" class="form-container">
                        <input type="hidden" name="Id" id="case_id" value="@Model.Id" />
                        <input type="hidden" name="Id" id="encryptedcaseid" value="" />
                        <input type="hidden" name="CaseFormName" id="CaseFormName" value="@Model.CaseFormName" />
                        <input type="hidden" name="CaseFormId" id="CaseFormId" value="@Model.CaseFormId" />
                        <div class="form-wrapper">
                            <div class="form-body">
                                @Html.Raw(FB.Render(Model.Id, Model.StateId, Model.CaseFormId))
                            </div>
                            <div class="form-footer">
                                <button type="button" class="btn btn-primary" id="btn-save-form">Save Content</button>
                            </div>
                        </div>
                        <div class="form-status">
                            <div class="form-status-wrapper">
                                @*<div class="case">
                    <h5 class="">Case Timeline</h5>
                    <div class="case-timeline">
                        <ul class="case-timeline__list">
                            @foreach (var stateitem in Model.StateList)
                            {
                                if (stateitem.Text.Equals(Model.StateList.Last().Text, StringComparison.OrdinalIgnoreCase))
                                {
                                    if (stateitem.Value.Equals(Model.StateId.ToString(), StringComparison.OrdinalIgnoreCase))
                                    {
                                        <li class="case-timeline__item active rejected">
                                            <span class="case-timeline__title">
                                                @stateitem.Text
                                            </span>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="case-timeline__item rejected">
                                            <span class="case-timeline__title">
                                                @stateitem.Text
                                            </span>
                                        </li>
                                    }


                                }
                                else if (stateitem.Value.Equals(Model.StateId.ToString(), StringComparison.OrdinalIgnoreCase))
                                {
                                    <li class="case-timeline__item active">
                                        <span class="case-timeline__title">
                                            @stateitem.Text
                                        </span>
                                    </li>
                                }
                                else
                                {
                                    <li class="case-timeline__item">
                                        <span class="case-timeline__title">
                                            @stateitem.Text
                                        </span>
                                    </li>
                                }

                            }

                        </ul>
                        <span class="filling-line" aria-hidden="true"></span>
                    </div>
                </div>*@
                                <div class="form-viewdata">
                                    <div class="form-group">
                                        <label asp-for="UpdatedAt">Last updated</label>
                                        <input asp-for="UpdatedAt" type="text" class="form-control-plaintext font-weight-bold p-0" readonly>
                                    </div>
                                    <div class="form-group">
                                        <label asp-for="CreatedAt">Created</label>
                                        <input asp-for="CreatedAt" type="text" class="form-control-plaintext font-weight-bold p-0" readonly>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/scrollable-tab plugin/jquery.scrolling-tabs.min.js"></script>
<script src="~/js/simpleTransfer.js"></script>
<!-- main content ends -->
@section Scripts{
    <script src="~/js/form_builder_form_validation.js"></script>
    <script src="~/js/render_form_data.js"></script>
    <script src="~/js/formbuilder-element-event-1.0.1.js"></script>
    <script src="~/js/simpleTransfer.js"></script>
    <script>
        //clone on change number field
        jQuery(document).on("change", "[number-target]", function () {
            cloneByNumber(this);

        });
        //clone function using number field
        //clone function using number field
        function cloneByNumber(e) {

            let count = parseInt($(e).val());
            let jsonData = $(e).data("target").split(",");
            //let temp;
            var all = $(e).data("target");


            if (count >= prevCount || isNaN(count)) {
                var i = prevCount - 1;
                do {
                    var all;
                    $.each(jsonData, function (x, y) {

                        if ($(y).attr("id") !== undefined) {

                            $.each($(y).find("input,select,textarea"), function (a, b) {

                                let name = $(b).attr("name");
                                if (name.indexOf("[]") < 0) {
                                    $(b).attr("name", name + "[]");
                                }

                            });



                        }

                    });

                    if ($(all).attr("id") != undefined) {

                        //let colname = $(y).attr("id").replace('#', '');
                        let colname = $(all).attr("id");

                        if (!$(all).parent().hasClass("repeat-item-body") && i == 0) {
                            $(all).addClass("repeatItem");
                            $(all).attr("name", colname + "_" + (i + 1));
                            $(all).removeAttr("style");
                            $(all).wrapAll("<div class='accordion card border p-4' id='accordionExample" + colname + "'><div class='repeat-item'><div id='collapse-" + (i + 1) + "' class='collapse show' aria-labelledby='headingOne' data-parent='#accordionExample" + colname + "'><div class='repeat-item-body'></div></div></div></div>");

                            $(all).parents(".repeat-item").prepend("<div class='repeat-item-header' id='heading-" + (i + 1) + "'><h6 class='repeat-item-title'><span data-toggle='collapse' data-target='#collapse-" + (i + 1) + "' aria-expanded='true' aria-controls='collapse' data-target='#collapse-" + (i + 1) + "'>" + $(e).siblings("label").html() + " Item " + (i + 1) + "</span></h6></div>");
                        }

                        if ($("#" + e.id).val() == "" || count == 0) {
                            $("[name='" + colname + "']:not([id])").parents(".card").remove();
                            $(all).parents(".accordion").hide();
                        }
                        else if (count == 1) {
                            $("[name='" + colname + "']:not([id])").remove();
                            $(all).parents(".accordion").show();
                        }
                        else {
                            if (i == 0) {
                                $("[name='" + colname + "']:not([id])").parents(".card").remove();
                            }

                            $(all).parents(".accordion").show();
                            $(all).removeAttr("style");
                            let temp = $(all).clone().removeAttr("id").attr("name", colname + "_" + (i + 2)).addClass("repeatItem");


                            $.each(temp.find("input,textarea"), function (c, d) {
                                $(d).removeAttr("id").val("");
                            });
                            $.each(temp.find("select"), function (c, d) {
                                $(d).find("option:first").attr("selected", "selected");
                            });

                            $(temp).appendTo($("#accordionExample" + colname)).wrapAll("<div class='repeat-item'><div id='collapse-" + (i + 2) + "' class='collapse' aria-labelledby='headingOne' data-parent='#accordionExample" + colname + "'><div class='repeat-item-body'></div></div></div>");

                            $(temp).parents(".repeat-item").prepend("<div class='repeat-item-header' id='heading-" + (i + 2) + "'><h6 class='repeat-item-title'><span data-toggle='collapse' data-target='#collapse-" + (i + 2) + "' aria-expanded='false' aria-controls='collapse' data-target='#collapse-" + (i + 2) + "'>" + $(e).siblings("label").html() + " Item " + (i + 2) + "</span></h6></div>");

                        }
                        $(all).removeAttr("style");
                    }

                    i++;
                } while (i < count - 1);
                setCurrencyValueEvent();
            }
            else if (count < prevCount) {
                if (count < 1) {
                    $(".repeat-item").slice(1).remove();
                    $(all).parents(".accordion").hide();
                }
                else {
                    $(".repeat-item").slice(count).remove();
                }
            }
            if (isNaN(count)) {
                prevCount = 1;
            }
            else {
                if (count == 0) {
                    prevCount = 1;
                }
                else {
                    prevCount = count;
                }


            }
            $('.datetime').daterangepicker({
                "singleDatePicker": true,
                "timePicker": true,
                locale: {
                    format: 'DD/MM/YYYY hh:mm A'
                }
            });
            $('.date').daterangepicker({
                "singleDatePicker": true,
                locale: {
                    format: 'DD MMMM, YYYY'
                }
            });


        }


    </script>

    @if (Model.Id != 0)
    {

        <script>


            $(function () {
                //clone collection for number field
                    let cc = $('[number-target]');
                    $.each(cc, function (k, l) {
                        cloneByNumber(l);
                    });
                 allValues = JSON.parse('@data');
                renderData(allValues);
                 setTimeout(function () {
                $('.pop').addClass("img__pop");
                $.each($('.pop'), function (i, v) {
                    $(this).attr("data-slide", (i + 1));
                })
                $('.pop').removeClass("pop");
                createLightBox();
            }, 1000);
        });
        </script>
    }
    else
    {
        <script>

            //clone collection for number field
            let cc = $('[number-target]');
            if (cc > 0) {
                $.each(cc, function (k, l) {
                    cloneByNumber(l);
                });
            }

        </script>

    }


    <script type="text/javascript">
        jQuery(document).ready(function () {

            var recaptchaElm = $('.g-recaptcha');

            setTimeout(function () {
                $.each(recaptchaElm, function (i, v) {
                    var sitekey = $(v).attr('data-site');
                    if (sitekey == null || sitekey == "") {
                        sitekey = "blank";
                    }
                    grecaptcha.render(v.id, {
                        'sitekey': sitekey
                    });
                });
            }, 500);


            $('.nav-tabs').scrollingTabs({
                bootstrapVersion: 4,
                cssClassLeftArrow: 'ri-arrow-left-s-fill',
                cssClassRightArrow: 'ri-arrow-right-s-fill',
                disableScrollArrowsOnFullyScrolled: true
            });
            setTimeout(function () {
                $('.nav-tabs').scrollingTabs("refresh");
            }, 3000);

            $("input[data-types='currency']").on({
                keyup: function () {
                    formatCurrency($(this));
                },
                blur: function () {
                    formatCurrency($(this), "blur");
                }
            });

            function formatNumber(n) {
                // format number 1000000 to 1,234,567
                return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            }
            function formatCurrency(input, blur) {
                // appends $ to value, validates decimal side
                // and puts cursor back in right position.

                // get input value
                var input_val = input.val();

                // don't validate empty input
                if (input_val === "") { return; }

                // original length
                var original_len = input_val.length;

                // initial caret position
                var caret_pos = input.prop("selectionStart");

                // check for decimal
                if (input_val.indexOf(".") >= 0) {

                    // get position of first decimal
                    // this prevents multiple decimals from
                    // being entered
                    var decimal_pos = input_val.indexOf(".");

                    // split number by decimal point
                    var left_side = input_val.substring(0, decimal_pos);
                    var right_side = input_val.substring(decimal_pos);

                    // add commas to left side of number
                    left_side = formatNumber(left_side);

                    // validate right side
                    right_side = formatNumber(right_side);

                    // On blur make sure 2 numbers after decimal
                    if (blur === "blur") {
                        right_side += "00";
                    }

                    // Limit decimal to only 2 digits
                    right_side = right_side.substring(0, 2);

                    // join number by .
                    input_val = left_side + "." + right_side;

                } else {
                    // no decimal entered
                    // add commas to number
                    // remove all non-digits
                    input_val = formatNumber(input_val);

                    input_val = input_val;

                    // final formatting
                    if (blur === "blur") {
                        input_val += ".00";
                    }
                }

                // send updated string to input

                input.val(input_val);

                var updated_len = input_val.length;

                caret_pos = updated_len - original_len + caret_pos;
                input[0].setSelectionRange(caret_pos, caret_pos);
            }
            $(":input").inputmask();

            getcountrylist("");
            function getcountrylist(thisdata) {
                let selected = $(thisdata).children("option:selected").val();
                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: "@Url.Content("~/admin" + _Utils.GetTenantForUrl(false) + "/country-list")",
                    //data: ,
                    success: function (d) {
                        if (d != null) {
                            $.each(d, function (k, l) {
                                //console.log($(thisdata).attr("id"));
                                //  if (l.value.toLowerCase() != selected.toLowerCase()) {
                                $("#" + $(".country").attr("id")).append("<option value='" + (l == "null" ? "" : l.value.toLowerCase()) + "' data-selects >" + l.text + "</option>");
                                //  }
                            })
                        }
                    }
                });
            };

            $(document).on("keypress", ".datetime", function (e) {
                e.preventDefault();
            });

            $(document).on("keypress", ".date", function (e) {
                e.preventDefault();
            });

            $(document).on("keypress", ".time", function (e) {
                e.preventDefault();
            });



            $('.datetime').daterangepicker({
                "singleDatePicker": true,
                "timePicker": true,
                locale: {
                    format: 'DD/MM/YYYY hh:mm A'
                }
            });

            $('.date').daterangepicker({
                "singleDatePicker": true,
                locale: {
                    format: 'DD MMMM, YYYY'
                }
            });

            $('.time').daterangepicker({
                timePicker: true,
                timePicker24Hour: true,
                timePickerIncrement: 1,
                //timePickerSeconds: true,
                singleDatePicker: true,
                opens: 'right',
                locale: {
                    format: 'HH:mm A'
                }
            }).on('show.daterangepicker', function (ev, picker) {
                picker.container.find(".calendar-table").hide();
            });

            //showhide collection for selectbox
            let uu = $('[select-target]');
            $.each(uu, function (k, l) {
                showHideBySelectBox(l);
            });

            let btnHideShow = $('[data-action-click=onClick]');
            $.each(btnHideShow, function (k, l) {
                showHideByButton(l);
            });

            function showHideByButton(e) {
                var dataTargets = $(e).attr('data-target').split(',');
                var dataActions = $(e).attr('data-action').split(',');
                $.each(dataTargets, function (i, data) {
                    if (dataActions[i] === "True") {
                        $(data).hide();
                    }
                    else {
                        $(data).show();
                    }
                });
            };

            let checkboxHideShow = $('[data-checkbox=true]');
            $.each(checkboxHideShow, function (k, l) {
                showHideByCheckbox(l);
            });

            function showHideByCheckbox(e) {
    var dataTarget = $(e).attr('data-target');
    var dataTargets = [];
    if (typeof (dataTarget) !== "undefined") {
        dataTargets = dataTarget.split(',');
    }

    var dataAction = $(e).attr('data-action');
    var dataActions = [];
    if (typeof (dataAction) !== "undefined") {
        dataActions = dataAction.split(',');
    }


    $.each(dataTargets, function (i, data) {
        if (dataActions[i] === "True") {
            $(data).hide();
        }
        else {
            $(data).show();
        }
    });
}

function showHideByCheckboxBySelection(e) {
    var dataTarget = $(e).attr('data-target');
    var dataTargets = [];
    if (typeof (dataTarget) !== "undefined") {
        dataTargets = dataTarget.split(',');
    }

    var dataAction = $(e).attr('data-action');
    var dataActions = [];
    if (typeof (dataAction) !== "undefined") {
        dataActions = dataAction.split(',');
    }

    dataActions = FormBuilder.Element.Event().toggleElementForCheckbox(dataTargets, dataActions);
    $(e).attr('data-action', dataActions);
            };

            //showhide function for selectbox on change
            jQuery(document).on("change", "[select-target]", function () {
                showHideBySelectBox(this);

            });


            jQuery(document).on("change", "[data-checkbox=true]", function () {
                showHideByCheckboxBySelection(this);

            });

            //showhide function for selectbox
            function showHideBySelectBox(e) {

                if ($(e).children("option:selected").data("target") != null && $(e).children("option:selected").data("action") != "") {
                    let targets = $(e).children("option:selected").data("target").split(",");
                    let actions = $(e).children("option:selected").data("action").split(",");

                    for (var i = 0; i < targets.length; i++) {
                        if (actions[i].toLowerCase().trim() == "true") {
                            $(targets[i]).show();
                        }
                        else {
                            $(targets[i]).hide();
                        }
                    }
                }

            }
            //showhide collection for radio
            let rd = $('.radio-target');
            $.each(rd, function (k, l) {
                showHideByRadio(l);
            });

            //showhide function for selectbox on change
            jQuery(document).on("change", ".radio-target", function () {
                showHideByRadio(this);

            });

            //showhide function for selectbox
            function showHideByRadio(e) {
                if ($(e).data("target") != null && $(e).data("target") != "" && $(e)[0].checked == true) {
                    let targets = $(e).data("target").split(",");
                    let actions = $(e).data("action").split(",");

                    for (var i = 0; i < targets.length; i++) {
                        if (actions[i].toLowerCase().trim() == "true") {
                            $(targets[i]).show();
                        }
                        else {
                            $(targets[i]).hide();
                        }
                    }
                }

            }
            //show hide for Image
            let ii = $('.Image-target');
            $.each(ii, function (k, l) {

                showHideByImage(l);
            });

            //showhide function for selectbox on change
            jQuery(document).on("click", ".Image-target", function () {
                $(this).parent().parent().find('.Image-target').removeClass('show');
                $(this).addClass('show');
                showHideByImage(this);

            });

            //showhide function for selectbox
            function showHideByImage(e) {

                if (e.classList.contains('show') && $(e).data("target") != null && $(e).data("target") != "") {
                    let targets = $(e).data("target").split(",");
                    let actions = $(e).data("action").split(",");
                    var arrayHide = [];
                    for (var i = 0; i < targets.length; i++) {
                        if (actions[i].toLowerCase().trim() == "true") {
                            $(targets[i]).show();
                            $('#accordionExample' + targets[i].replace('#', '')).show();
                            var oo = $(targets[i]).find('[number-target]');

                            $.each(oo, function (k, l) {

                                let count = parseInt($(e).val());
                                let jsonData1 = $(l).data("target").split(",");
                                if (isNaN(count)) {

                                    $.each(jsonData1, function (x, y) {
                                        arrayHide.push(y);


                                    });
                                };

                            });

                        }
                        else {

                            $(targets[i]).hide();
                            $('#accordionExample' + targets[i].replace('#', '')).hide();

                        }
                    }
                    $.each(arrayHide, function (x, y) {
                        $(y).hide()
                    });

                }

            }
            //end of Show hide for Image
            //Radio Slider
            //showhide collection for radio
            let rds = $('.radio-slider-target');
            $.each(rds, function (k, l) {
                showHideByRadioSlider(l);
            });

            //showhide function for selectbox on change
            jQuery(document).on("change", ".radio-slider-target", function () {
                showHideByRadioSlider(this);

            });

            //showhide function for radio
            function showHideByRadioSlider(e) {
                if ($(e).data("targety") != null && $(e).data("targety") != "" && $(e)[0].checked == true) {
                    let targets = $(e).data("targety").split(",");
                    let actions = $(e).data("actiony").split(",");

                    for (var i = 0; i < targets.length; i++) {
                        if (actions[i].toLowerCase().trim() == "true") {
                            $(targets[i]).show();
                        }
                        else {
                            $(targets[i]).hide();
                        }
                    }
                }
                if ($(e).data("targetn") != null && $(e).data("targetn") != "" && $(e)[0].checked == false) {
                    let targets = $(e).data("targetn").split(",");
                    let actions = $(e).data("actionn").split(",");

                    for (var i = 0; i < targets.length; i++) {
                        if (actions[i].toLowerCase().trim() == "true") {
                            $(targets[i]).show();
                        }
                        else {
                            $(targets[i]).hide();
                        }
                    }
                }
            }

            $('.nav-link').click(function () {
                if ($(this).attr("id") == "Timeline") {
                    $('#btn-save-form').hide();
                }
                else {
                    $('#btn-save-form').show();
                }

            });
        });
//end Radio Slider


    </script>
    <script>
        $(function () {

            $("#btn-save-form").on("click", function () {
                 var formstring = '@_Utils.GetParams("Form")';
                checkValidation("form-to-save", formstring)
            })
        });
    </script>
    <!--Validation scripts end-->

    <script>

        function createLightBox() {
            var slides = '';
            // var thumbnail = '';
            var length = 0;
            var i = 1;
            $.each($('.fileuploader__item-image img'), function (index, value) {
                var imgsrc = $(this).attr("src");
                if (imgsrc.toLowerCase().indexOf("uploads") >= 0) {
                    length++;
                }
            })
            $.each($('.fileuploader__item-image img'), function (index, value) {
                var imgsrc = $(this).attr("src");
                var imgTitle = $(this).attr('data-imgtitle');
                if (imgsrc.toLowerCase().indexOf("uploads") >= 0) {
                    var currentIndex = i++;
                    //imgsrc = 'https://www.w3schools.com/howto/img_nature_wide.jpg';
                    slides += '<div class="lightbox__item mySlides"> <div class="numbertext">' + (currentIndex) + '/ ' + length + '</div> <img src="' + imgsrc + '" class="lightbox__img"> </div>';
                    //  thumbnail += '<div class="column"> <img class="demo" src="' + imgsrc + '" onclick="currentSlide(' + (currentIndex) + ')" alt="' + imgTitle + '"> </div>';
                }
            });

            var buttons = '<a href="#" class="prev lightbox__prev lightbox__icon" onclick="plusSlides(-1)"><span class="sr-only">Previous</span></a> <a href="#" class="next lightbox__next lightbox__icon" onclick="plusSlides(1)"><span class="sr-only">Next</span></a> <!-- Caption text -->';
            var caption = '<div class="slide-caption"><div id="caption"></div></div>';
            var count = '<div class="slide-counter"><span id="currentNumber"></span>/' + length + '</div>';;
            var modal = '<div id="lightBoxModal" class="lightbox"><div class="lightbox__dialog"><div class="lightbox__toolbar">' + count + caption + '<a href="#" class="lightbox__close lightbox__icon" onclick="closeModal()"><i class="sr-only">Close</i></a></div><div class="lightbox__content">' + slides + buttons + '' + '</div></div></div>';

            $('body').append(modal);
            //  showSlides(slideIndex);
        }
        // Open the Modal
        function openModal() {
            $("#lightBoxModal").css("display", "block");
        }

        // Close the Modal
        function closeModal() {
            $("#lightBoxModal").css("display", "none");
            $('.lightbox__backdrop').remove();
        }

        $(document).on('keyup', function (e) {
            if (e.keyCode === 27) {
                e.preventDefault();
                closeModal()
            }
            if (e.keyCode == 37) {
                if ($('#lightBoxModal').css('display') == "block") {
                    plusSlides(-1)
                }
            }
            if (e.keyCode == 39) {
                if ($('#lightBoxModal').css('display') == "block") {
                    plusSlides(1);
                }
            }
        });

        var slideIndex = 1;

        // Next/previous controls
        function plusSlides(n) {
            showSlides(slideIndex += n);
        }

        // Thumbnail image controls
        function currentSlide(n) {
            slideIndex = n;
            showSlides(slideIndex);
        }
        function showSlides(n) {
            debugger
            var i;
            var slides = document.getElementsByClassName("mySlides");
            //  var dots = document.getElementsByClassName("demo");
            var captionText = document.getElementById("caption");
            if (n > slides.length) { slideIndex = 1 }
            if (n < 1) { slideIndex = slides.length }
            $('#currentNumber').text(slideIndex);
            for (i = 0; i < slides.length; i++) {
                slides[i].style.display = "none";
            }
            //for (i = 0; i < dots.length; i++) {
            //    dots[i].className = dots[i].className.replace(" active", "");
            //}
            slides[slideIndex - 1].style.display = "block";
            var windowInnerHeight = window.innerHeight;
            var imgHeight = $(slides[slideIndex - 1]).find('img').height();
            if (imgHeight > windowInnerHeight) {
                $('.lightbox__img').css('max-height', (windowInnerHeight * 0.9) + 'px');
            }

            // dots[slideIndex - 1].className += " active";
            // captionText.innerHTML = dots[slideIndex - 1].alt;
        }
        $(document).on("click", '.img__pop', function (e) {
            var slide = $(e.currentTarget).attr("data-slide");
            currentSlide(parseInt(slide));
            openModal();
            var slidess = document.getElementsByClassName("mySlides");
            var _windowInnerHeight = window.innerHeight;
            var _imgHeight = $(slidess[parseInt(slide) - 1]).find('img').height();
            if (_imgHeight > _windowInnerHeight) {
                $('.lightbox__img').css('max-height', (_windowInnerHeight * 0.9) + 'px');
            }
            $('body').append('<div class="lightbox__backdrop show"></div>');
        })

        function animateLine() {
            var p = $(".case-timeline__item.active");
            var p1 = $(".case-timeline");
            if (p.length && p1.length) {
                var offset = p.offset();
                var offset1 = p1.offset();
                $('.filling-line').animate({
                    height: offset.top - offset1.top + 18
                }, {
                    duration: 1000,
                    step: function (now, fx) {
                        $(this).height(now / 100 * 9 + 1);
                    }
                });
            }
        };
        $(document).ready(animateLine);
        $(window).resize(animateLine);

    </script>
}